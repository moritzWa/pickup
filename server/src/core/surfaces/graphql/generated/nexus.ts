/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as entities from "./../../../infra/postgres/entities/index"
import type { Context } from "./../context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  ActivityFilter: "new" | "unread"
  CategoryEnum: "Arts & Culture" | "Business Models" | "Corporate Technology" | "Entrepreneurship" | "Finance & Legal" | "Health & Wellness" | "International Business" | "Management" | "Software Engineering" | "Startups" | "Technology & Society" | "Venture Capital & Investment"
  ContentFeedFilter: "archived" | "for_you" | "new" | "popular" | "queue" | "unread"
  InteractionTypeEnum: "bookmarked" | "finished" | "left_in_progress" | "likes" | "listened_to_beginning" | "scrolled_past" | "skipped"
  UserAuthProviderEnum: "firebase"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  Upload: any
}

export interface NexusGenObjects {
  Category: { // root type
    emoji: string; // String!
    name: string; // String!
    subcategories: string[]; // [String!]!
  }
  CategorySection: { // root type
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    name: string; // String!
  }
  Content: entities.Content ;
  ContentRespondResponse: { // root type
    responseAudioUrl: string; // String!
    transcription: string; // String!
  }
  ContentSession: entities.ContentSession ;
  CreateUserResponse: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  FeedItem: entities.FeedItem ;
  FollowUpQuestion: { // root type
    answer: string; // String!
    id: string; // String!
    question: string; // String!
  }
  GetMobileUpdateResponse: { // root type
    latestVersion?: string | null; // String
    shouldUpdate: boolean; // Boolean!
    userVersion?: string | null; // String
  }
  GetQueueResponse: { // root type
    queue: NexusGenRootTypes['FeedItem'][]; // [FeedItem!]!
    total: number; // Int!
  }
  Interaction: entities.Interaction ;
  Metadata: { // root type
    author?: string | null; // String
    byline?: string | null; // String
    dir?: string | null; // String
    excerpt?: string | null; // String
    full_text?: string | null; // String
    lang?: string | null; // String
    length?: number | null; // Int
    page_type?: string | null; // String
    publishedTime?: string | null; // String
    siteName?: string | null; // String
  }
  Mutation: {};
  PaymentMethod: { // root type
    last4: string; // String!
    paymentMethodId: string; // String!
    source: string; // String!
  }
  Profile: { // root type
    avatarImageUrl?: string | null; // String
    description: string; // String!
    id: string; // ID!
    isFollowing: boolean; // Boolean!
    name: string; // String!
    numFollowers: number; // Int!
    numFollowing: number; // Int!
    username: string; // String!
  }
  Query: {};
  SearchResult: { // root type
    averageDistance: number; // Float!
    createdDate: NexusGenScalars['Date']; // Date!
    fullText?: string | null; // String
    id: number; // Int!
    lastCrawled?: NexusGenScalars['Date'] | null; // Date
    link: string; // String!
    metadata?: NexusGenRootTypes['Metadata'] | null; // Metadata
    minDistance: number; // Float!
    modifiedDate: NexusGenScalars['Date']; // Date!
    readCount: number; // Int!
    snippet?: string | null; // String
    title: string; // String!
    userIds: number[]; // [Int!]!
  }
  User: entities.User ;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Category: { // field return type
    emoji: string; // String!
    name: string; // String!
    subcategories: string[]; // [String!]!
  }
  CategorySection: { // field return type
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    name: string; // String!
  }
  Content: { // field return type
    audioUrl: string; // String!
    categories: string[]; // [String!]!
    contentSession: NexusGenRootTypes['ContentSession'] | null; // ContentSession
    context: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    followUpQuestions: NexusGenRootTypes['FollowUpQuestion'][]; // [FollowUpQuestion!]!
    id: string; // String!
    lengthMs: number; // Int!
    lengthSeconds: number; // Int!
    sourceImageUrl: string | null; // String
    summary: string | null; // String
    thumbnailImageUrl: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    websiteUrl: string; // String!
  }
  ContentRespondResponse: { // field return type
    responseAudioUrl: string; // String!
    transcription: string; // String!
  }
  ContentSession: { // field return type
    bookmarkedAt: NexusGenScalars['Date'] | null; // Date
    content: NexusGenRootTypes['Content'] | null; // Content
    contentId: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    currentMs: number | null; // Float
    durationMs: number | null; // Float
    id: string; // String!
    isBookmarked: boolean | null; // Boolean
    percentFinished: number | null; // Float
    timestampCursor: number | null; // Float
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // String!
  }
  CreateUserResponse: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  FeedItem: { // field return type
    content: NexusGenRootTypes['Content'] | null; // Content
    contentId: string; // ID!
    contentSession: NexusGenRootTypes['ContentSession'] | null; // ContentSession
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    isQueued: boolean; // Boolean!
    position: number; // Float!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  FollowUpQuestion: { // field return type
    answer: string; // String!
    id: string; // String!
    question: string; // String!
  }
  GetMobileUpdateResponse: { // field return type
    latestVersion: string | null; // String
    shouldUpdate: boolean; // Boolean!
    userVersion: string | null; // String
  }
  GetQueueResponse: { // field return type
    queue: NexusGenRootTypes['FeedItem'][]; // [FeedItem!]!
    total: number; // Int!
  }
  Interaction: { // field return type
    contentId: string; // ID!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    type: NexusGenEnums['InteractionTypeEnum']; // InteractionTypeEnum!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  Metadata: { // field return type
    author: string | null; // String
    byline: string | null; // String
    dir: string | null; // String
    excerpt: string | null; // String
    full_text: string | null; // String
    lang: string | null; // String
    length: number | null; // Int
    page_type: string | null; // String
    publishedTime: string | null; // String
    siteName: string | null; // String
  }
  Mutation: { // field return type
    addToQueue: NexusGenRootTypes['FeedItem']; // FeedItem!
    archiveContent: NexusGenRootTypes['FeedItem']; // FeedItem!
    bookmarkContent: NexusGenRootTypes['ContentSession']; // ContentSession!
    clearQueue: string; // String!
    createUser: NexusGenRootTypes['CreateUserResponse']; // CreateUserResponse!
    deleteMe: string; // String!
    getAuthToken: string; // String!
    recordInteraction: NexusGenRootTypes['Interaction']; // Interaction!
    respondToContent: NexusGenRootTypes['ContentRespondResponse']; // ContentRespondResponse!
    sendVerification: string; // String!
    setCommuteTime: NexusGenRootTypes['User']; // User!
    setInterests: NexusGenRootTypes['User']; // User!
    showMore: string; // String!
    startContent: NexusGenRootTypes['ContentSession']; // ContentSession!
    startListening: NexusGenRootTypes['ContentSession']; // ContentSession!
    updateContentSession: NexusGenRootTypes['ContentSession']; // ContentSession!
    updateUser: NexusGenRootTypes['User']; // User!
    verifyPhoneNumber: NexusGenRootTypes['User']; // User!
  }
  PaymentMethod: { // field return type
    last4: string; // String!
    paymentMethodId: string; // String!
    source: string; // String!
  }
  Profile: { // field return type
    avatarImageUrl: string | null; // String
    description: string; // String!
    id: string; // ID!
    isFollowing: boolean; // Boolean!
    name: string; // String!
    numFollowers: number; // Int!
    numFollowing: number; // Int!
    username: string; // String!
  }
  Query: { // field return type
    checkCode: boolean; // Boolean!
    getActivity: NexusGenRootTypes['Content'][]; // [Content!]!
    getBookmarks: NexusGenRootTypes['Content'][]; // [Content!]!
    getCategories: NexusGenRootTypes['CategorySection'][]; // [CategorySection!]!
    getContent: NexusGenRootTypes['Content']; // Content!
    getContentSession: NexusGenRootTypes['ContentSession']; // ContentSession!
    getCurrentContentSession: NexusGenRootTypes['ContentSession'] | null; // ContentSession
    getFeed: NexusGenRootTypes['Content'][]; // [Content!]!
    getIntercomMobileToken: string; // String!
    getLikes: NexusGenRootTypes['ContentSession'][]; // [ContentSession!]!
    getMobileUpdate: NexusGenRootTypes['GetMobileUpdateResponse']; // GetMobileUpdateResponse!
    getNextContent: NexusGenRootTypes['FeedItem'] | null; // FeedItem
    getPaymentMethods: NexusGenRootTypes['PaymentMethod'][]; // [PaymentMethod!]!
    getPrevContent: NexusGenRootTypes['FeedItem'] | null; // FeedItem
    getProfile: NexusGenRootTypes['Profile']; // Profile!
    getQueue: NexusGenRootTypes['GetQueueResponse']; // GetQueueResponse!
    me: NexusGenRootTypes['User'] | null; // User
    searchSimilarLinks: NexusGenRootTypes['SearchResult'][]; // [SearchResult!]!
  }
  SearchResult: { // field return type
    averageDistance: number; // Float!
    createdDate: NexusGenScalars['Date']; // Date!
    fullText: string | null; // String
    id: number; // Int!
    lastCrawled: NexusGenScalars['Date'] | null; // Date
    link: string; // String!
    metadata: NexusGenRootTypes['Metadata'] | null; // Metadata
    minDistance: number; // Float!
    modifiedDate: NexusGenScalars['Date']; // Date!
    readCount: number; // Int!
    snippet: string | null; // String
    title: string; // String!
    userIds: number[]; // [Int!]!
  }
  User: { // field return type
    authProvider: NexusGenEnums['UserAuthProviderEnum']; // UserAuthProviderEnum!
    authProviderId: string; // String!
    avatarImageUrl: string | null; // String
    biometricPublicKey: string | null; // String
    commuteTime: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    description: string; // String!
    email: string; // String!
    hasMobile: boolean | null; // Boolean
    hasPushNotificationsEnabled: boolean | null; // Boolean
    hasTwoFactorAuth: boolean; // Boolean!
    hasVerifiedPhoneNumber: boolean; // Boolean!
    id: string; // String!
    intercomMobileUserHash: string | null; // String
    intercomUserHash: string | null; // String
    isSuperuser: boolean; // Boolean!
    name: string | null; // String
    number: number | null; // Float
    phoneNumber: string | null; // String
    referralCode: string | null; // String
    referredByCode: string | null; // String
    referredByName: string | null; // String
    role: string | null; // String
    timezone: string | null; // String
    updatedAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenFieldTypeNames {
  Category: { // field return type name
    emoji: 'String'
    name: 'String'
    subcategories: 'String'
  }
  CategorySection: { // field return type name
    categories: 'Category'
    name: 'String'
  }
  Content: { // field return type name
    audioUrl: 'String'
    categories: 'String'
    contentSession: 'ContentSession'
    context: 'String'
    createdAt: 'Date'
    followUpQuestions: 'FollowUpQuestion'
    id: 'String'
    lengthMs: 'Int'
    lengthSeconds: 'Int'
    sourceImageUrl: 'String'
    summary: 'String'
    thumbnailImageUrl: 'String'
    title: 'String'
    updatedAt: 'Date'
    websiteUrl: 'String'
  }
  ContentRespondResponse: { // field return type name
    responseAudioUrl: 'String'
    transcription: 'String'
  }
  ContentSession: { // field return type name
    bookmarkedAt: 'Date'
    content: 'Content'
    contentId: 'String'
    createdAt: 'Date'
    currentMs: 'Float'
    durationMs: 'Float'
    id: 'String'
    isBookmarked: 'Boolean'
    percentFinished: 'Float'
    timestampCursor: 'Float'
    updatedAt: 'Date'
    userId: 'String'
  }
  CreateUserResponse: { // field return type name
    token: 'String'
    user: 'User'
  }
  FeedItem: { // field return type name
    content: 'Content'
    contentId: 'ID'
    contentSession: 'ContentSession'
    createdAt: 'Date'
    id: 'ID'
    isQueued: 'Boolean'
    position: 'Float'
    updatedAt: 'Date'
    userId: 'ID'
  }
  FollowUpQuestion: { // field return type name
    answer: 'String'
    id: 'String'
    question: 'String'
  }
  GetMobileUpdateResponse: { // field return type name
    latestVersion: 'String'
    shouldUpdate: 'Boolean'
    userVersion: 'String'
  }
  GetQueueResponse: { // field return type name
    queue: 'FeedItem'
    total: 'Int'
  }
  Interaction: { // field return type name
    contentId: 'ID'
    createdAt: 'Date'
    id: 'ID'
    type: 'InteractionTypeEnum'
    updatedAt: 'Date'
  }
  Metadata: { // field return type name
    author: 'String'
    byline: 'String'
    dir: 'String'
    excerpt: 'String'
    full_text: 'String'
    lang: 'String'
    length: 'Int'
    page_type: 'String'
    publishedTime: 'String'
    siteName: 'String'
  }
  Mutation: { // field return type name
    addToQueue: 'FeedItem'
    archiveContent: 'FeedItem'
    bookmarkContent: 'ContentSession'
    clearQueue: 'String'
    createUser: 'CreateUserResponse'
    deleteMe: 'String'
    getAuthToken: 'String'
    recordInteraction: 'Interaction'
    respondToContent: 'ContentRespondResponse'
    sendVerification: 'String'
    setCommuteTime: 'User'
    setInterests: 'User'
    showMore: 'String'
    startContent: 'ContentSession'
    startListening: 'ContentSession'
    updateContentSession: 'ContentSession'
    updateUser: 'User'
    verifyPhoneNumber: 'User'
  }
  PaymentMethod: { // field return type name
    last4: 'String'
    paymentMethodId: 'String'
    source: 'String'
  }
  Profile: { // field return type name
    avatarImageUrl: 'String'
    description: 'String'
    id: 'ID'
    isFollowing: 'Boolean'
    name: 'String'
    numFollowers: 'Int'
    numFollowing: 'Int'
    username: 'String'
  }
  Query: { // field return type name
    checkCode: 'Boolean'
    getActivity: 'Content'
    getBookmarks: 'Content'
    getCategories: 'CategorySection'
    getContent: 'Content'
    getContentSession: 'ContentSession'
    getCurrentContentSession: 'ContentSession'
    getFeed: 'Content'
    getIntercomMobileToken: 'String'
    getLikes: 'ContentSession'
    getMobileUpdate: 'GetMobileUpdateResponse'
    getNextContent: 'FeedItem'
    getPaymentMethods: 'PaymentMethod'
    getPrevContent: 'FeedItem'
    getProfile: 'Profile'
    getQueue: 'GetQueueResponse'
    me: 'User'
    searchSimilarLinks: 'SearchResult'
  }
  SearchResult: { // field return type name
    averageDistance: 'Float'
    createdDate: 'Date'
    fullText: 'String'
    id: 'Int'
    lastCrawled: 'Date'
    link: 'String'
    metadata: 'Metadata'
    minDistance: 'Float'
    modifiedDate: 'Date'
    readCount: 'Int'
    snippet: 'String'
    title: 'String'
    userIds: 'Int'
  }
  User: { // field return type name
    authProvider: 'UserAuthProviderEnum'
    authProviderId: 'String'
    avatarImageUrl: 'String'
    biometricPublicKey: 'String'
    commuteTime: 'String'
    createdAt: 'Date'
    description: 'String'
    email: 'String'
    hasMobile: 'Boolean'
    hasPushNotificationsEnabled: 'Boolean'
    hasTwoFactorAuth: 'Boolean'
    hasVerifiedPhoneNumber: 'Boolean'
    id: 'String'
    intercomMobileUserHash: 'String'
    intercomUserHash: 'String'
    isSuperuser: 'Boolean'
    name: 'String'
    number: 'Float'
    phoneNumber: 'String'
    referralCode: 'String'
    referredByCode: 'String'
    referredByName: 'String'
    role: 'String'
    timezone: 'String'
    updatedAt: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addToQueue: { // args
      contentId: string; // ID!
    }
    archiveContent: { // args
      contentId: string; // ID!
    }
    bookmarkContent: { // args
      contentId: string; // ID!
    }
    createUser: { // args
      email: string; // String!
      name?: string | null; // String
      password?: string | null; // String
      referralCode?: string | null; // String
      username?: string | null; // String
    }
    recordInteraction: { // args
      contentId: string; // ID!
      eventType: NexusGenEnums['InteractionTypeEnum']; // InteractionTypeEnum!
    }
    respondToContent: { // args
      audioFileUrl: string; // String!
      contentId: string; // ID!
    }
    sendVerification: { // args
      phoneNumber: string; // String!
    }
    setCommuteTime: { // args
      commuteTime?: string | null; // String
      timezone?: string | null; // String
    }
    setInterests: { // args
      interestCategories: string[]; // [String!]!
      interestDescription?: string | null; // String
    }
    startContent: { // args
      contentId: string; // ID!
    }
    updateContentSession: { // args
      contentSessionId: string; // ID!
      currentMs?: number | null; // Int
      isBookmarked?: boolean | null; // Boolean
      isLiked?: boolean | null; // Boolean
    }
    updateUser: { // args
      avatarImageUrl?: string | null; // String
      biometricPublicKey?: string | null; // String
      hasMobile?: boolean | null; // Boolean
      hasPushNotifications?: boolean | null; // Boolean
      hasTwoFactorAuth?: boolean | null; // Boolean
      name?: string | null; // String
      unreadCount?: number | null; // Int
    }
    verifyPhoneNumber: { // args
      otpCode: string; // String!
      phoneNumber: string; // String!
    }
  }
  Query: {
    checkCode: { // args
      referralCode: string; // String!
    }
    getActivity: { // args
      filter?: NexusGenEnums['ActivityFilter'] | null; // ActivityFilter
    }
    getBookmarks: { // args
      limit?: number | null; // Int
      page?: number | null; // Int
    }
    getContent: { // args
      contentId: string; // ID!
    }
    getContentSession: { // args
      contentId: string; // ID!
    }
    getFeed: { // args
      filter?: NexusGenEnums['ContentFeedFilter'] | null; // ContentFeedFilter
      limit?: number | null; // Int
    }
    getIntercomMobileToken: { // args
      platform?: string | null; // String
    }
    getLikes: { // args
      limit?: number | null; // Int
      page?: number | null; // Int
    }
    getNextContent: { // args
      afterContentId: string; // ID!
      currentMs?: number | null; // Int
    }
    getPrevContent: { // args
      beforeContentId: string; // ID!
      currentMs?: number | null; // Int
    }
    getProfile: { // args
      userId?: string | null; // ID
    }
    searchSimilarLinks: { // args
      limit: number | null; // Int
      query: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}