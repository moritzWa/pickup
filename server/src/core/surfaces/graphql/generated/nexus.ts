/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as entities from "./../../../infra/postgres/entities/index"
import type { Context } from "./../context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  MemecoinLinkInput: { // input type
    alwaysShow?: boolean | null; // Boolean
    type: NexusGenEnums['MemecoinLinkTypeEnum']; // MemecoinLinkTypeEnum!
    url: string; // String!
  }
  QuoteAsset: { // input type
    contractAddress: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
  }
  TokenAddressAndProvider: { // input type
    contractAddress: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
  }
}

export interface NexusGenEnums {
  AccountProviderEnum: "solana"
  AirdropClaimStatusEnum: "claimed" | "pending" | "succeeded"
  BlockchainEnum: "ethereum" | "polygon" | "solana" | "terra"
  CategoryEnum: "actors" | "athletes" | "birds" | "bonk" | "cats" | "celebrities" | "characters" | "corporations" | "dogs" | "executives" | "frogs" | "influencers" | "media" | "memes" | "politics" | "presidential_candidates_twenty_four" | "rappers" | "religion" | "sports" | "trump" | "united_nations"
  CategorySlugEnum: "actors" | "athletes" | "birds" | "bonk" | "cats" | "celebrities" | "characters" | "corporations" | "dogs" | "executives" | "frogs" | "influencers" | "media" | "memes" | "politics" | "presidential_candidates_twenty_four" | "rappers" | "religions" | "sports" | "trump" | "countries"
  ChartTypeEnum: "candlestick" | "line"
  CostBasisAlgorithmEnum: "acb" | "fifo" | "hifo" | "lifo" | "share_pooling"
  CountryEnum: "AU" | "CA" | "UK" | "US"
  CurrencyCodeEnum: "USD"
  DiscoveryResultTypeEnum: "FungibleToken" | "NFT"
  EventTypeEnum: "twitter_space"
  GranularityEnum: "all" | "day" | "hour" | "month" | "three_month" | "week" | "year" | "ytd"
  MemecoinLinkTypeEnum: "birdeye" | "coingecko_dex" | "coingecko" | "dexscreener" | "dextools" | "discord" | "email" | "instagram" | "jupiter" | "medium" | "raydium" | "reddit" | "solscan" | "spotify" | "telegram" | "tiktok" | "twitter" | "website" | "youtube"
  SwapPrivacyEnum: "following" | "private" | "public"
  SwapStatusEnum: "confirmed" | "failed" | "finalized" | "pending" | "processed"
  SwapTypeEnum: "buy" | "sell" | "unknown"
  TokenWarningReasonEnum: "blacklisted" | "freezeable" | "rugged" | "top10HolderPercent"
  TokenWarningSeverityEnum: "high" | "low"
  TradingProviderEnum: "jupiter"
  TradingSideEnum: "buy" | "sell"
  TransactionStatusEnum: "confirmed" | "failed" | "finalized" | "pending" | "processed"
  TransactionTypeEnum: "deposit" | "failed" | "trade" | "withdrawal"
  TransferTypeEnum: "internal" | "received" | "sent"
  UserAuthProviderEnum: "firebase" | "magic"
  UserStatusEnum: "pending" | "user"
  WithdrawalStatusEnum: "canceled" | "completed" | "failed" | "pending" | "sent_funds"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  Upload: any
}

export interface NexusGenObjects {
  Airdrop: entities.Airdrop ;
  AirdropClaim: entities.AirdropClaim ;
  AssetAccountBreakdown: { // root type
    accountId: string; // String!
    amount: number; // Float!
    assetId: string; // String!
    avgBasisFiatAmount?: number | null; // Float
    costBasisFiatAmount: number; // Float!
    currentFiatAmount?: number | null; // Float
    currentTokenPriceFiatAmount?: number | null; // Float
    estimatedCurrentValue?: number | null; // Float
    gainOrLossFiatAmount?: number | null; // Float
    hasPrice: boolean; // Boolean!
    percentChangeAllTime?: number | null; // Float
  }
  BasicCompetitionDetails: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    name: string; // String!
    token1Id: string; // ID!
    token2Id: string; // ID!
  }
  BlueChipData: { // root type
    contractAddress: string; // String!
    iconImageUrl: string; // String!
    isClaimed?: boolean | null; // Boolean
    isMovementVerified?: boolean | null; // Boolean
    isStrict?: boolean | null; // Boolean
    name: string; // String!
    priceChangePercentage24h?: number | null; // Float
    priceChangePercentage24hFormatted?: string | null; // String
    priceFormatted?: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
  }
  CategoryEntry: entities.CategoryEntry ;
  CategoryMetadata: { // root type
    bannerImageUrl?: string | null; // String
    categoryName?: string | null; // String
    description?: string | null; // String
    iconImageUrl?: string | null; // String
    slug?: string | null; // String
    type: NexusGenEnums['CategoryEnum']; // CategoryEnum!
  }
  CategorySummary: { // root type
    bannerImageUrl?: string | null; // String
    categoryName: string; // String!
    description: string; // String!
    iconImageUrl?: string | null; // String
    slug: string; // String!
    tokens: NexusGenRootTypes['DiscoverySplashResult'][]; // [DiscoverySplashResult!]!
    totalMarketCap?: number | null; // Float
    totalMarketCapChange?: number | null; // Float
    totalMarketCapChangePercentage?: number | null; // Float
    totalVol24h?: number | null; // Float
    type: NexusGenEnums['CategoryEnum']; // CategoryEnum!
  }
  ClaimCodeResponse: { // root type
    message: string; // String!
  }
  CreateUserResponse: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Deposit: entities.Deposit ;
  DepositAddressResponse: { // root type
    isFunded: boolean; // Boolean!
    nativeAmount: number; // Float!
    provider: string; // String!
    publicAddress: string; // String!
  }
  DiscoveryCategory: { // root type
    bannerImageUrl?: string | null; // String
    categoryName: string; // String!
    description: string; // String!
    iconImageUrl?: string | null; // String
    slug: string; // String!
    tokens: NexusGenRootTypes['DiscoverySplashResult'][]; // [DiscoverySplashResult!]!
    totalMarketCap?: number | null; // Float
    totalMarketCapChange?: number | null; // Float
    totalVol24h?: number | null; // Float
    type: NexusGenEnums['CategoryEnum']; // CategoryEnum!
  }
  DiscoveryResult: { // root type
    coinGeckoTokenId?: string | null; // String
    contractAddress: string; // String!
    iconImageUrl?: string | null; // String
    isClaimed?: boolean | null; // Boolean
    isDead?: boolean | null; // Boolean
    isMovementVerified?: boolean | null; // Boolean
    isStrict?: boolean | null; // Boolean
    marketCap?: string | null; // String
    name: string; // String!
    price?: number | null; // Float
    priceChangePercentage24h?: number | null; // Float
    priceChangePercentage24hFormatted?: string | null; // String
    priceFormatted?: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    type: NexusGenEnums['DiscoveryResultTypeEnum']; // DiscoveryResultTypeEnum!
    vol24h?: string | null; // String
  }
  DiscoverySplashResult: { // root type
    coinGeckoTokenId?: string | null; // String
    contractAddress: string; // String!
    iconImageUrl: string; // String!
    id: string; // ID!
    isClaimed?: boolean | null; // Boolean
    isDead?: boolean | null; // Boolean
    isMovementVerified?: boolean | null; // Boolean
    isStrict?: boolean | null; // Boolean
    marketCap?: string | null; // String
    name: string; // String!
    priceChangePercentage24h?: number | null; // Float
    priceChangePercentage24hFormatted?: string | null; // String
    priceFormatted?: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    type: NexusGenEnums['DiscoveryResultTypeEnum']; // DiscoveryResultTypeEnum!
    vol24h?: string | null; // String
  }
  DiscoveryUserResult: { // root type
    name: string; // String!
    username: string; // String!
  }
  Event: entities.Event ;
  FavoriteMemecoin: entities.FavoriteMemecoin ;
  FeedComment: entities.FeedComment ;
  FeedLike: entities.FeedLike ;
  FeedPost: entities.FeedPost ;
  FullCompetitionDetails: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    name: string; // String!
    token1: NexusGenRootTypes['TokenData']; // TokenData!
    token2: NexusGenRootTypes['TokenData']; // TokenData!
  }
  FullFeedPost: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    numComments: number; // Int!
    numLikes: number; // Int!
    profile: NexusGenRootTypes['SimpleProfile']; // SimpleProfile!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  GenerateUsernameResponse: { // root type
    name: string; // String!
    username: string; // String!
  }
  GetAirdropInfoResponse: { // root type
    hasClaimedAsInvited: boolean; // Boolean!
    hasClaimedAsInviter: boolean; // Boolean!
    invitedAirdropClaimId?: string | null; // ID
    inviterAirdropClaimId?: string | null; // ID
  }
  GetAvailableOnrampsResponse: { // root type
    isCoinbasePayEnabled: boolean; // Boolean!
    isKadoEnabled: boolean; // Boolean!
    isMesoEnabled: boolean; // Boolean!
    isOnramperEnabled: boolean; // Boolean!
    isVenmoEnabled: boolean; // Boolean!
  }
  GetBlueChipsResponse: { // root type
    results: NexusGenRootTypes['BlueChipData'][]; // [BlueChipData!]!
  }
  GetCategoryTypesResponse: { // root type
    categories: NexusGenRootTypes['CategoryMetadata'][]; // [CategoryMetadata!]!
  }
  GetCloseAccountTransactionResponse: { // root type
    blockHeight: number; // Float!
    blockhash: string; // String!
    rawTransaction: string; // String!
  }
  GetDiscoveryResultsResponse: { // root type
    categories: NexusGenRootTypes['CategoryMetadata'][]; // [CategoryMetadata!]!
    results: NexusGenRootTypes['DiscoveryResult'][]; // [DiscoveryResult!]!
    users: NexusGenRootTypes['DiscoveryUserResult'][]; // [DiscoveryUserResult!]!
  }
  GetDiscoverySplashResponse: { // root type
    blueChips: NexusGenRootTypes['DiscoverySplashResult'][]; // [DiscoverySplashResult!]!
    categories: NexusGenRootTypes['DiscoveryCategory'][]; // [DiscoveryCategory!]!
    competitions: NexusGenRootTypes['FullCompetitionDetails'][]; // [FullCompetitionDetails!]!
    results: NexusGenRootTypes['DiscoverySplashResult'][]; // [DiscoverySplashResult!]!
  }
  GetEventsForCategoryResponse: { // root type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
  }
  GetEventsForTokensResponse: { // root type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
  }
  GetFollowsResponse: { // root type
    followers: NexusGenRootTypes['PublicProfileInfo'][]; // [PublicProfileInfo!]!
    following: NexusGenRootTypes['PublicProfileInfo'][]; // [PublicProfileInfo!]!
  }
  GetFriendsBuyFeedResponse: { // root type
    chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    contractAddress: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    iconImageUrl?: string | null; // String
    id: string; // ID!
    isYou: boolean; // Boolean!
    name: string; // String!
    symbol: string; // String!
    username: string; // String!
  }
  GetMarketCapsAndVolumesResponse: { // root type
    contractAddress: string; // String!
    marketCap?: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    vol24h?: string | null; // String
  }
  GetMemecoinOfTheDayResponse: { // root type
    color1: string; // String!
    color2: string; // String!
    contractAddress: string; // String!
    description: string; // String!
    iconImageUrl: string; // String!
    name: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    url: string; // String!
  }
  GetMobileUpdateResponse: { // root type
    latestVersion?: string | null; // String
    shouldUpdate: boolean; // Boolean!
    userVersion?: string | null; // String
  }
  GetMyAirdropClaimsResponse: { // root type
    claims: NexusGenRootTypes['AirdropClaim'][]; // [AirdropClaim!]!
    pending: NexusGenRootTypes['AirdropClaim'][]; // [AirdropClaim!]!
  }
  GetNewsForTickersResponse: { // root type
    news: Array<NexusGenRootTypes['NewsForTickers'] | null>; // [NewsForTickers]!
  }
  GetOfframpOrderDetailsResponse: { // root type
    amount: number; // Float!
    chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    depositAddress: string; // String!
    id: string; // String!
    tokenContractAddress: string; // String!
    trackingUrl: string; // String!
  }
  GetOfframpUrlResponse: { // root type
    provider: string; // String!
    url: string; // String!
  }
  GetOnrampUrlResponse: { // root type
    provider: string; // String!
    url: string; // String!
  }
  GetPositionsResponse: { // root type
    positions: NexusGenRootTypes['PortfolioPosition'][]; // [PortfolioPosition!]!
  }
  GetProfileResponse: { // root type
    avatarImageUrl?: string | null; // String
    description: string; // String!
    id: string; // ID!
    isFollowing: boolean; // Boolean!
    name: string; // String!
    numFollowers: number; // Int!
    numFollowing: number; // Int!
    relationship?: NexusGenRootTypes['Relationship'] | null; // Relationship
    username: string; // String!
  }
  GetQuoteResponse: { // root type
    bestQuote: NexusGenRootTypes['Quote']; // Quote!
    timestamp: NexusGenScalars['Date']; // Date!
  }
  GetReferralEarningsResponse: { // root type
    totalEarningsCents: number; // Float!
    totalReferrals: number; // Float!
  }
  GetSwapTransactionResponse: { // root type
    solanaBlockhash?: string | null; // String
    solanaLastValidBlockHeight?: number | null; // Float
    txn: string; // String!
    wallet: string; // String!
  }
  GetTokenChartResponse: { // root type
    points: NexusGenRootTypes['TokenChartPoint'][]; // [TokenChartPoint!]!
    type: NexusGenEnums['ChartTypeEnum']; // ChartTypeEnum!
  }
  GetTokenInfoResponse: { // root type
    about: NexusGenRootTypes['GetTokenInfoResponseAbout']; // GetTokenInfoResponseAbout!
    bestLpPoolAddress?: string | null; // String
    security: NexusGenRootTypes['GetTokenInfoResponseSecurity']; // GetTokenInfoResponseSecurity!
    stats: NexusGenRootTypes['GetTokenInfoResponseStats']; // GetTokenInfoResponseStats!
    warning?: NexusGenRootTypes['TokenWarning'] | null; // TokenWarning
  }
  GetTokenInfoResponseAbout: { // root type
    address: string; // String!
    bannerUrl?: string | null; // String
    categories: NexusGenRootTypes['CategoryEntry'][]; // [CategoryEntry!]!
    description?: string | null; // String
    holder?: number | null; // Int
    irlName?: string | null; // String
    isClaimed: boolean; // Boolean!
    links: NexusGenRootTypes['GetTokenOverviewResponseExtensions']; // GetTokenOverviewResponseExtensions!
    moreLinks: NexusGenRootTypes['MemecoinLink'][]; // [MemecoinLink!]!
    numMentions?: number | null; // Int
  }
  GetTokenInfoResponseSecurity: { // root type
    creationTime?: string | null; // String
    freezeable?: boolean | null; // Boolean
    mintTime?: string | null; // String
    showTop10?: boolean | null; // Boolean
    top10HolderPercent?: number | null; // Float
    top10UserPercent?: number | null; // Float
  }
  GetTokenInfoResponseStats: { // root type
    buys24h?: number | null; // Int
    isLiquidityLocked?: boolean | null; // Boolean
    liquidity?: number | null; // Float
    marketCap?: number | null; // Float
    sells24h?: number | null; // Int
    traders24h?: number | null; // Int
    trades24h?: number | null; // Int
    v24hUSD?: number | null; // Float
  }
  GetTokenOverviewResponseExtensions: { // root type
    coingecko?: string | null; // String
    dexscreener?: string | null; // String
    discord?: string | null; // String
    medium?: string | null; // String
    telegram?: string | null; // String
    twitter?: string | null; // String
    website?: string | null; // String
  }
  GetTokenPriceResponse: { // root type
    currentPrice: string; // String!
    currentPriceCents: number; // Float!
  }
  GetWithdrawalTransactionResponse: { // root type
    solanaBlockhash?: string | null; // String
    solanaLastValidBlockHeight?: number | null; // Float
    txn: string; // String!
    wallet: string; // String!
  }
  IsFirstSwapTokenResponse: { // root type
    isFirstSwap: boolean; // Boolean!
    totalSwaps: number; // Float!
  }
  LargestHolder: { // root type
    accountKey?: string | null; // String
    amount?: string | null; // String
    percentage?: number | null; // Float
    tokenAccountKey?: string | null; // String
  }
  LoginResponse: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  MemecoinLink: { // root type
    alwaysShow?: boolean | null; // Boolean
    type: NexusGenEnums['MemecoinLinkTypeEnum']; // MemecoinLinkTypeEnum!
    url: string; // String!
  }
  Mutation: {};
  NewsForTickers: { // root type
    date: string; // String!
    imageUrl: string; // String!
    newsUrl: string; // String!
    sentiment: string; // String!
    sourceName: string; // String!
    text: string; // String!
    tickers: Array<string | null>; // [String]!
    title: string; // String!
    topics: Array<string | null>; // [String]!
    type: string; // String!
  }
  Notification: entities.Notification ;
  PaymentMethod: { // root type
    last4: string; // String!
    paymentMethodId: string; // String!
    source: string; // String!
  }
  PortfolioPosition: { // root type
    amount: number; // Float!
    canSelectToken: boolean; // Boolean!
    contractAddress: string; // String!
    dailyChangePerUnitCents?: number | null; // Float
    dailyChangePercentage?: number | null; // Float
    dailyFiatAmountCents?: number | null; // Float
    dailyPercentageFormatted?: string | null; // String
    fiatAmountCents: number; // Float!
    fiatCurrency: string; // String!
    iconImageUrl: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
  }
  PortfolioResponse: { // root type
    dailyChangeFiatAmount: string; // String!
    dailyChangeFiatAmountCents: number; // Float!
    dailyChangePercentageFormatted: string; // String!
    positions: NexusGenRootTypes['PortfolioPosition'][]; // [PortfolioPosition!]!
    totalFiatAmount: string; // String!
    totalFiatAmountCents: number; // Int!
  }
  PublicProfileInfo: { // root type
    avatarImageUrl?: string | null; // String
    id: string; // ID!
    name: string; // String!
    numberOfFollowers?: number | null; // Float
    username: string; // String!
  }
  Query: {};
  Quote: entities.Quote ;
  QuoteFee: { // root type
    tokenContractAddress: string; // String!
  }
  Referral: entities.Referral ;
  ReferralCommission: entities.ReferralCommission ;
  ReferralPayout: entities.ReferralPayout ;
  Relationship: entities.Relationship ;
  SearchTokensResponse: { // root type
    recommended?: NexusGenRootTypes['TokenSearchResult'] | null; // TokenSearchResult
    tokens: NexusGenRootTypes['TokenSearchResult'][]; // [TokenSearchResult!]!
  }
  SimpleProfile: { // root type
    avatarImageUrl?: string | null; // String
    id: string; // String!
    name: string; // String!
    username: string; // String!
  }
  SubmitRawTransactionResponse: { // root type
    signature: string; // String!
  }
  SubmitTransactionResponse: { // root type
    signature: string; // String!
    swapId: string; // ID!
  }
  SubmitWithdrawalResponse: { // root type
    signature: string; // String!
  }
  Swap: entities.Swap ;
  Token: entities.Token ;
  TokenChartPoint: { // root type
    timestamp: NexusGenScalars['Date']; // Date!
    utcTimeSeconds: number; // Float!
  }
  TokenData: { // root type
    coinGeckoTokenId?: string | null; // String
    contractAddress: string; // String!
    iconImageUrl: string; // String!
    id: string; // ID!
    isClaimed?: boolean | null; // Boolean
    isDead?: boolean | null; // Boolean
    isMovementVerified?: boolean | null; // Boolean
    isStrict?: boolean | null; // Boolean
    marketCap?: string | null; // String
    name: string; // String!
    priceChangePercentage24h?: number | null; // Float
    priceChangePercentage24hFormatted?: string | null; // String
    priceFormatted?: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    vol24h?: string | null; // String
  }
  TokenInfo: { // root type
    coingeckoId?: string | null; // String
    contractAddress: string; // String!
    iconImageUrl?: string | null; // String
    isClaimed?: boolean | null; // Boolean
    isMovementVerified?: boolean | null; // Boolean
    isStrict?: boolean | null; // Boolean
    name: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    tokenId?: string | null; // ID
    warning?: NexusGenRootTypes['TokenWarning'] | null; // TokenWarning
  }
  TokenPermission: entities.TokenPermission ;
  TokenPosition: { // root type
    amount: number; // Float!
    avgCostBasisPerUnitCents?: number | null; // Float
    avgCostBasisPerUnitFormatted?: string | null; // String
    coingeckoTokenId?: string | null; // String
    contractAddress: string; // String!
    fiatAmountCents: number; // Float!
    fiatAmountFormatted: string; // String!
    fiatCurrency: string; // String!
    iconImageUrl?: string | null; // String
    isNativeToken: boolean; // Boolean!
    isPending?: boolean | null; // Boolean
    priceCents: number; // Float!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol?: string | null; // String
    totalCostBasisCents?: number | null; // Float
    totalCostBasisFormatted?: string | null; // String
    totalReturnFiatCents?: number | null; // Float
    totalReturnFiatFormatted?: string | null; // String
    totalReturnPercentage?: number | null; // Float
  }
  TokenSearchResult: { // root type
    coingeckoId?: string | null; // String
    contractAddress: string; // String!
    iconImageUrl?: string | null; // String
    name: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
  }
  TokenWarning: { // root type
    message?: string | null; // String
    reason: NexusGenEnums['TokenWarningReasonEnum']; // TokenWarningReasonEnum!
    severity: NexusGenEnums['TokenWarningSeverityEnum']; // TokenWarningSeverityEnum!
  }
  Transaction: entities.Transaction ;
  Transfer: entities.Transfer ;
  UpdateTokenCategoriesResponse: { // root type
    categories: NexusGenRootTypes['CategoryMetadata'][]; // [CategoryMetadata!]!
  }
  UploadFileResponse: { // root type
    fileName: string; // String!
    objectFileKey: string; // String!
    url: string; // String!
  }
  User: entities.User ;
  UserWallet: { // root type
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    publicKey: string; // String!
  }
  VerifyBiometricResponse: { // root type
    message?: string | null; // String
    status: string; // String!
  }
  VoteForTokenResponse: { // root type
    numVotes: number; // Int!
    tokenId: string; // ID!
  }
  Wallet: { // root type
    isFunded: boolean; // Boolean!
    provider: string; // String!
    publicAddress: string; // String!
  }
  WatchlistAsset: entities.WatchlistAsset ;
  WatchlistAssetWithInfo: { // root type
    contractAddress: string; // String!
    iconImageUrl?: string | null; // String
    id: string; // String!
    name?: string | null; // String
    price?: number | null; // Float
    priceChangePercentage24h?: number | null; // Float
    priceChangePercentage24hFormatted?: string | null; // String
    priceFormatted?: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol?: string | null; // String
  }
  Withdrawal: entities.Withdrawal ;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Airdrop: { // field return type
    amountPerClaim: number; // Float!
    endDate: NexusGenScalars['Date']; // Date!
    hasClaimed: boolean | null; // Boolean
    iconImageUrl: string; // String!
    id: string; // ID!
    invitedAmount: number; // Float!
    inviterAmount: number; // Float!
    startDate: NexusGenScalars['Date']; // Date!
    symbol: string; // String!
  }
  AirdropClaim: { // field return type
    airdrop: NexusGenRootTypes['Airdrop'] | null; // Airdrop
    airdropId: string; // ID!
    code: string; // String!
    id: string; // ID!
    invitedUsername: string | null; // String
    inviterUsername: string | null; // String
    isUserIn: boolean | null; // Boolean
    status: NexusGenEnums['AirdropClaimStatusEnum']; // AirdropClaimStatusEnum!
    transactionHash: string | null; // String
    userEarnAmount: number | null; // Float
  }
  AssetAccountBreakdown: { // field return type
    accountId: string; // String!
    amount: number; // Float!
    assetId: string; // String!
    avgBasisFiatAmount: number | null; // Float
    costBasisFiatAmount: number; // Float!
    currentFiatAmount: number | null; // Float
    currentTokenPriceFiatAmount: number | null; // Float
    estimatedCurrentValue: number | null; // Float
    gainOrLossFiatAmount: number | null; // Float
    hasPrice: boolean; // Boolean!
    percentChangeAllTime: number | null; // Float
  }
  BasicCompetitionDetails: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    name: string; // String!
    token1Id: string; // ID!
    token2Id: string; // ID!
  }
  BlueChipData: { // field return type
    contractAddress: string; // String!
    iconImageUrl: string; // String!
    isClaimed: boolean | null; // Boolean
    isMovementVerified: boolean | null; // Boolean
    isStrict: boolean | null; // Boolean
    name: string; // String!
    priceChangePercentage24h: number | null; // Float
    priceChangePercentage24hFormatted: string | null; // String
    priceFormatted: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
  }
  CategoryEntry: { // field return type
    category: NexusGenEnums['CategoryEnum']; // CategoryEnum!
    categoryName: string; // String!
    slug: string | null; // String
    tokenId: string; // ID!
  }
  CategoryMetadata: { // field return type
    bannerImageUrl: string | null; // String
    categoryName: string | null; // String
    description: string | null; // String
    iconImageUrl: string | null; // String
    slug: string | null; // String
    type: NexusGenEnums['CategoryEnum']; // CategoryEnum!
  }
  CategorySummary: { // field return type
    bannerImageUrl: string | null; // String
    categoryName: string; // String!
    description: string; // String!
    iconImageUrl: string | null; // String
    slug: string; // String!
    tokens: NexusGenRootTypes['DiscoverySplashResult'][]; // [DiscoverySplashResult!]!
    totalMarketCap: number | null; // Float
    totalMarketCapChange: number | null; // Float
    totalMarketCapChangePercentage: number | null; // Float
    totalVol24h: number | null; // Float
    type: NexusGenEnums['CategoryEnum']; // CategoryEnum!
  }
  ClaimCodeResponse: { // field return type
    message: string; // String!
  }
  CreateUserResponse: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Deposit: { // field return type
    amount: number; // Float!
    createdAt: string; // String!
    hasSentFunds: boolean; // Boolean!
    id: string; // ID!
    paypalOrderId: string | null; // String
    source: string; // String!
    sourceType: string | null; // String
    status: string; // String!
    transactionHash: string | null; // String
    updatedAt: string; // String!
  }
  DepositAddressResponse: { // field return type
    isFunded: boolean; // Boolean!
    nativeAmount: number; // Float!
    provider: string; // String!
    publicAddress: string; // String!
  }
  DiscoveryCategory: { // field return type
    bannerImageUrl: string | null; // String
    categoryName: string; // String!
    description: string; // String!
    iconImageUrl: string | null; // String
    slug: string; // String!
    tokens: NexusGenRootTypes['DiscoverySplashResult'][]; // [DiscoverySplashResult!]!
    totalMarketCap: number | null; // Float
    totalMarketCapChange: number | null; // Float
    totalVol24h: number | null; // Float
    type: NexusGenEnums['CategoryEnum']; // CategoryEnum!
  }
  DiscoveryResult: { // field return type
    coinGeckoTokenId: string | null; // String
    contractAddress: string; // String!
    iconImageUrl: string | null; // String
    isClaimed: boolean | null; // Boolean
    isDead: boolean | null; // Boolean
    isMovementVerified: boolean | null; // Boolean
    isStrict: boolean | null; // Boolean
    marketCap: string | null; // String
    name: string; // String!
    price: number | null; // Float
    priceChangePercentage24h: number | null; // Float
    priceChangePercentage24hFormatted: string | null; // String
    priceFormatted: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    type: NexusGenEnums['DiscoveryResultTypeEnum']; // DiscoveryResultTypeEnum!
    vol24h: string | null; // String
  }
  DiscoverySplashResult: { // field return type
    coinGeckoTokenId: string | null; // String
    contractAddress: string; // String!
    iconImageUrl: string; // String!
    id: string; // ID!
    isClaimed: boolean | null; // Boolean
    isDead: boolean | null; // Boolean
    isMovementVerified: boolean | null; // Boolean
    isStrict: boolean | null; // Boolean
    marketCap: string | null; // String
    name: string; // String!
    priceChangePercentage24h: number | null; // Float
    priceChangePercentage24hFormatted: string | null; // String
    priceFormatted: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    type: NexusGenEnums['DiscoveryResultTypeEnum']; // DiscoveryResultTypeEnum!
    vol24h: string | null; // String
  }
  DiscoveryUserResult: { // field return type
    name: string; // String!
    username: string; // String!
  }
  Event: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    iconImageUrl: string; // String!
    id: string; // ID!
    link: string; // String!
    startTime: NexusGenScalars['Date']; // Date!
    title: string; // String!
    tokenId: string; // ID!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FavoriteMemecoin: { // field return type
    contractAddress: string; // String!
    iconImageUrl: string | null; // String
    name: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
  }
  FeedComment: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    feedCommentId: string | null; // ID
    feedPostId: string | null; // ID
    id: string; // ID!
    numComments: number; // Int!
    numLikes: number; // Int!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  FeedLike: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    feedCommentId: string | null; // ID
    feedPostId: string | null; // ID
    id: string; // ID!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  FeedPost: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    numComments: number; // Int!
    numLikes: number; // Int!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  FullCompetitionDetails: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    name: string; // String!
    token1: NexusGenRootTypes['TokenData']; // TokenData!
    token2: NexusGenRootTypes['TokenData']; // TokenData!
  }
  FullFeedPost: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    numComments: number; // Int!
    numLikes: number; // Int!
    profile: NexusGenRootTypes['SimpleProfile']; // SimpleProfile!
    updatedAt: NexusGenScalars['Date']; // Date!
    userId: string; // ID!
  }
  GenerateUsernameResponse: { // field return type
    name: string; // String!
    username: string; // String!
  }
  GetAirdropInfoResponse: { // field return type
    hasClaimedAsInvited: boolean; // Boolean!
    hasClaimedAsInviter: boolean; // Boolean!
    invitedAirdropClaimId: string | null; // ID
    inviterAirdropClaimId: string | null; // ID
  }
  GetAvailableOnrampsResponse: { // field return type
    isCoinbasePayEnabled: boolean; // Boolean!
    isKadoEnabled: boolean; // Boolean!
    isMesoEnabled: boolean; // Boolean!
    isOnramperEnabled: boolean; // Boolean!
    isVenmoEnabled: boolean; // Boolean!
  }
  GetBlueChipsResponse: { // field return type
    results: NexusGenRootTypes['BlueChipData'][]; // [BlueChipData!]!
  }
  GetCategoryTypesResponse: { // field return type
    categories: NexusGenRootTypes['CategoryMetadata'][]; // [CategoryMetadata!]!
  }
  GetCloseAccountTransactionResponse: { // field return type
    blockHeight: number; // Float!
    blockhash: string; // String!
    rawTransaction: string; // String!
  }
  GetDiscoveryResultsResponse: { // field return type
    categories: NexusGenRootTypes['CategoryMetadata'][]; // [CategoryMetadata!]!
    results: NexusGenRootTypes['DiscoveryResult'][]; // [DiscoveryResult!]!
    users: NexusGenRootTypes['DiscoveryUserResult'][]; // [DiscoveryUserResult!]!
  }
  GetDiscoverySplashResponse: { // field return type
    blueChips: NexusGenRootTypes['DiscoverySplashResult'][]; // [DiscoverySplashResult!]!
    categories: NexusGenRootTypes['DiscoveryCategory'][]; // [DiscoveryCategory!]!
    competitions: NexusGenRootTypes['FullCompetitionDetails'][]; // [FullCompetitionDetails!]!
    results: NexusGenRootTypes['DiscoverySplashResult'][]; // [DiscoverySplashResult!]!
  }
  GetEventsForCategoryResponse: { // field return type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
  }
  GetEventsForTokensResponse: { // field return type
    events: NexusGenRootTypes['Event'][]; // [Event!]!
  }
  GetFollowsResponse: { // field return type
    followers: NexusGenRootTypes['PublicProfileInfo'][]; // [PublicProfileInfo!]!
    following: NexusGenRootTypes['PublicProfileInfo'][]; // [PublicProfileInfo!]!
  }
  GetFriendsBuyFeedResponse: { // field return type
    chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    contractAddress: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    iconImageUrl: string | null; // String
    id: string; // ID!
    isYou: boolean; // Boolean!
    name: string; // String!
    symbol: string; // String!
    username: string; // String!
  }
  GetMarketCapsAndVolumesResponse: { // field return type
    contractAddress: string; // String!
    marketCap: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    vol24h: string | null; // String
  }
  GetMemecoinOfTheDayResponse: { // field return type
    color1: string; // String!
    color2: string; // String!
    contractAddress: string; // String!
    description: string; // String!
    iconImageUrl: string; // String!
    name: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    url: string; // String!
  }
  GetMobileUpdateResponse: { // field return type
    latestVersion: string | null; // String
    shouldUpdate: boolean; // Boolean!
    userVersion: string | null; // String
  }
  GetMyAirdropClaimsResponse: { // field return type
    claims: NexusGenRootTypes['AirdropClaim'][]; // [AirdropClaim!]!
    pending: NexusGenRootTypes['AirdropClaim'][]; // [AirdropClaim!]!
  }
  GetNewsForTickersResponse: { // field return type
    news: Array<NexusGenRootTypes['NewsForTickers'] | null>; // [NewsForTickers]!
  }
  GetOfframpOrderDetailsResponse: { // field return type
    amount: number; // Float!
    chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    depositAddress: string; // String!
    id: string; // String!
    tokenContractAddress: string; // String!
    trackingUrl: string; // String!
  }
  GetOfframpUrlResponse: { // field return type
    provider: string; // String!
    url: string; // String!
  }
  GetOnrampUrlResponse: { // field return type
    provider: string; // String!
    url: string; // String!
  }
  GetPositionsResponse: { // field return type
    positions: NexusGenRootTypes['PortfolioPosition'][]; // [PortfolioPosition!]!
  }
  GetProfileResponse: { // field return type
    avatarImageUrl: string | null; // String
    description: string; // String!
    id: string; // ID!
    isFollowing: boolean; // Boolean!
    name: string; // String!
    numFollowers: number; // Int!
    numFollowing: number; // Int!
    relationship: NexusGenRootTypes['Relationship'] | null; // Relationship
    username: string; // String!
  }
  GetQuoteResponse: { // field return type
    bestQuote: NexusGenRootTypes['Quote']; // Quote!
    timestamp: NexusGenScalars['Date']; // Date!
  }
  GetReferralEarningsResponse: { // field return type
    totalEarningsCents: number; // Float!
    totalReferrals: number; // Float!
  }
  GetSwapTransactionResponse: { // field return type
    solanaBlockhash: string | null; // String
    solanaLastValidBlockHeight: number | null; // Float
    txn: string; // String!
    wallet: string; // String!
  }
  GetTokenChartResponse: { // field return type
    points: NexusGenRootTypes['TokenChartPoint'][]; // [TokenChartPoint!]!
    type: NexusGenEnums['ChartTypeEnum']; // ChartTypeEnum!
  }
  GetTokenInfoResponse: { // field return type
    about: NexusGenRootTypes['GetTokenInfoResponseAbout']; // GetTokenInfoResponseAbout!
    bestLpPoolAddress: string | null; // String
    security: NexusGenRootTypes['GetTokenInfoResponseSecurity']; // GetTokenInfoResponseSecurity!
    stats: NexusGenRootTypes['GetTokenInfoResponseStats']; // GetTokenInfoResponseStats!
    warning: NexusGenRootTypes['TokenWarning'] | null; // TokenWarning
  }
  GetTokenInfoResponseAbout: { // field return type
    address: string; // String!
    bannerUrl: string | null; // String
    categories: NexusGenRootTypes['CategoryEntry'][]; // [CategoryEntry!]!
    description: string | null; // String
    holder: number | null; // Int
    irlName: string | null; // String
    isClaimed: boolean; // Boolean!
    links: NexusGenRootTypes['GetTokenOverviewResponseExtensions']; // GetTokenOverviewResponseExtensions!
    moreLinks: NexusGenRootTypes['MemecoinLink'][]; // [MemecoinLink!]!
    numMentions: number | null; // Int
  }
  GetTokenInfoResponseSecurity: { // field return type
    creationTime: string | null; // String
    freezeable: boolean | null; // Boolean
    mintTime: string | null; // String
    showTop10: boolean | null; // Boolean
    top10HolderPercent: number | null; // Float
    top10UserPercent: number | null; // Float
  }
  GetTokenInfoResponseStats: { // field return type
    buys24h: number | null; // Int
    isLiquidityLocked: boolean | null; // Boolean
    liquidity: number | null; // Float
    marketCap: number | null; // Float
    sells24h: number | null; // Int
    traders24h: number | null; // Int
    trades24h: number | null; // Int
    v24hUSD: number | null; // Float
  }
  GetTokenOverviewResponseExtensions: { // field return type
    coingecko: string | null; // String
    dexscreener: string | null; // String
    discord: string | null; // String
    medium: string | null; // String
    telegram: string | null; // String
    twitter: string | null; // String
    website: string | null; // String
  }
  GetTokenPriceResponse: { // field return type
    currentPrice: string; // String!
    currentPriceCents: number; // Float!
  }
  GetWithdrawalTransactionResponse: { // field return type
    solanaBlockhash: string | null; // String
    solanaLastValidBlockHeight: number | null; // Float
    txn: string; // String!
    wallet: string; // String!
  }
  IsFirstSwapTokenResponse: { // field return type
    isFirstSwap: boolean; // Boolean!
    totalSwaps: number; // Float!
  }
  LargestHolder: { // field return type
    accountKey: string | null; // String
    amount: string | null; // String
    percentage: number | null; // Float
    tokenAccountKey: string | null; // String
  }
  LoginResponse: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  MemecoinLink: { // field return type
    alwaysShow: boolean | null; // Boolean
    type: NexusGenEnums['MemecoinLinkTypeEnum']; // MemecoinLinkTypeEnum!
    url: string; // String!
  }
  Mutation: { // field return type
    addOrRemoveFavorite: NexusGenRootTypes['FavoriteMemecoin']; // FavoriteMemecoin!
    claimAirdrop: NexusGenRootTypes['AirdropClaim']; // AirdropClaim!
    claimCode: NexusGenRootTypes['ClaimCodeResponse']; // ClaimCodeResponse!
    claimInitialDeposit: string; // String!
    claimPermission: NexusGenRootTypes['TokenPermission']; // TokenPermission!
    createBlacklistToken: string; // String!
    createDeposit: NexusGenRootTypes['Deposit']; // Deposit!
    createEvent: NexusGenRootTypes['Event']; // Event!
    createFeedPost: NexusGenRootTypes['FullFeedPost']; // FullFeedPost!
    createSwapEvent: string; // String!
    createUser: NexusGenRootTypes['CreateUserResponse']; // CreateUserResponse!
    createWatchlistAssetForUser: string; // String!
    deleteEvent: string; // String!
    deleteMe: string; // String!
    deleteWatchlistAssetForUser: string; // String!
    followProfile: string; // String!
    getAuthToken: string; // String!
    getCloseAccountTransaction: NexusGenRootTypes['GetCloseAccountTransactionResponse']; // GetCloseAccountTransactionResponse!
    getUploadUrl: NexusGenRootTypes['UploadFileResponse']; // UploadFileResponse!
    invitePermission: NexusGenRootTypes['TokenPermission']; // TokenPermission!
    leaveFeedback: string; // String!
    logMagicIssue: string; // String!
    login: NexusGenRootTypes['LoginResponse']; // LoginResponse!
    readNotifications: string; // String!
    refreshPortfolio: string; // String!
    sendVerification: string; // String!
    submitRawTransaction: NexusGenRootTypes['SubmitRawTransactionResponse']; // SubmitRawTransactionResponse!
    submitTransaction: NexusGenRootTypes['SubmitTransactionResponse']; // SubmitTransactionResponse!
    submitTransactionV2: NexusGenRootTypes['SubmitTransactionResponse']; // SubmitTransactionResponse!
    submitWithdrawal: NexusGenRootTypes['SubmitWithdrawalResponse']; // SubmitWithdrawalResponse!
    submitWithdrawalV2: NexusGenRootTypes['Withdrawal']; // Withdrawal!
    textDownloadLink: string; // String!
    toggleNotifyOnBuy: NexusGenRootTypes['Relationship']; // Relationship!
    unfollowProfile: string; // String!
    updateProfile: string; // String!
    updateReadFriendsUntil: string; // String!
    updateToken: NexusGenRootTypes['Token']; // Token!
    updateTokenCategories: NexusGenRootTypes['UpdateTokenCategoriesResponse']; // UpdateTokenCategoriesResponse!
    updateUser: NexusGenRootTypes['User']; // User!
    uploadFile: NexusGenRootTypes['UploadFileResponse']; // UploadFileResponse!
    upsertAirdropClaim: NexusGenRootTypes['AirdropClaim']; // AirdropClaim!
    verifyBiometric: NexusGenRootTypes['VerifyBiometricResponse']; // VerifyBiometricResponse!
    verifyPhoneNumber: NexusGenRootTypes['User']; // User!
  }
  NewsForTickers: { // field return type
    date: string; // String!
    imageUrl: string; // String!
    newsUrl: string; // String!
    sentiment: string; // String!
    sourceName: string; // String!
    text: string; // String!
    tickers: Array<string | null>; // [String]!
    title: string; // String!
    topics: Array<string | null>; // [String]!
    type: string; // String!
  }
  Notification: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    followerUserId: string | null; // ID
    followerUserName: string | null; // String
    followerUserUsername: string | null; // String
    hasRead: boolean; // Boolean!
    hasSent: boolean; // Boolean!
    iconImageUrl: string | null; // String
    id: string; // ID!
    subtitle: string; // String!
    title: string; // String!
    tokenContractAddress: string | null; // String
    tokenProvider: NexusGenEnums['AccountProviderEnum'] | null; // AccountProviderEnum
    userId: string; // String!
  }
  PaymentMethod: { // field return type
    last4: string; // String!
    paymentMethodId: string; // String!
    source: string; // String!
  }
  PortfolioPosition: { // field return type
    amount: number; // Float!
    canSelectToken: boolean; // Boolean!
    contractAddress: string; // String!
    dailyChangePerUnitCents: number | null; // Float
    dailyChangePercentage: number | null; // Float
    dailyFiatAmountCents: number | null; // Float
    dailyPercentageFormatted: string | null; // String
    fiatAmountCents: number; // Float!
    fiatCurrency: string; // String!
    iconImageUrl: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
  }
  PortfolioResponse: { // field return type
    dailyChangeFiatAmount: string; // String!
    dailyChangeFiatAmountCents: number; // Float!
    dailyChangePercentageFormatted: string; // String!
    positions: NexusGenRootTypes['PortfolioPosition'][]; // [PortfolioPosition!]!
    totalFiatAmount: string; // String!
    totalFiatAmountCents: number; // Int!
  }
  PublicProfileInfo: { // field return type
    avatarImageUrl: string | null; // String
    id: string; // ID!
    name: string; // String!
    numberOfFollowers: number | null; // Float
    username: string; // String!
  }
  Query: { // field return type
    checkCode: boolean; // Boolean!
    checkValidUsername: string; // String!
    generateUsername: string; // String!
    generateUsernameV2: NexusGenRootTypes['GenerateUsernameResponse']; // GenerateUsernameResponse!
    getAirdropClaimByCode: NexusGenRootTypes['AirdropClaim']; // AirdropClaim!
    getAirdropClaimById: NexusGenRootTypes['AirdropClaim']; // AirdropClaim!
    getAirdropInfo: NexusGenRootTypes['GetAirdropInfoResponse']; // GetAirdropInfoResponse!
    getAvailableOnramps: NexusGenRootTypes['GetAvailableOnrampsResponse']; // GetAvailableOnrampsResponse!
    getBlueChips: NexusGenRootTypes['GetBlueChipsResponse']; // GetBlueChipsResponse!
    getCategories: NexusGenRootTypes['CategorySummary'][]; // [CategorySummary!]!
    getCategory: NexusGenRootTypes['DiscoveryCategory']; // DiscoveryCategory!
    getCategoryTypes: NexusGenRootTypes['GetCategoryTypesResponse']; // GetCategoryTypesResponse!
    getClaimForAirdrop: NexusGenRootTypes['AirdropClaim']; // AirdropClaim!
    getCurrentAirdrop: NexusGenRootTypes['Airdrop'] | null; // Airdrop
    getDepositAddress: NexusGenRootTypes['DepositAddressResponse']; // DepositAddressResponse!
    getDiscoveryResults: NexusGenRootTypes['GetDiscoveryResultsResponse']; // GetDiscoveryResultsResponse!
    getDiscoverySplash: NexusGenRootTypes['GetDiscoverySplashResponse']; // GetDiscoverySplashResponse!
    getEventsForCategory: NexusGenRootTypes['GetEventsForCategoryResponse']; // GetEventsForCategoryResponse!
    getEventsForTokens: NexusGenRootTypes['GetEventsForTokensResponse']; // GetEventsForTokensResponse!
    getFavoriteMemecoinInfo: NexusGenRootTypes['FavoriteMemecoin'] | null; // FavoriteMemecoin
    getFavoriteMemecoinsForUser: NexusGenRootTypes['FavoriteMemecoin'][]; // [FavoriteMemecoin!]!
    getFeedPosts: NexusGenRootTypes['FullFeedPost'][]; // [FullFeedPost!]!
    getFollows: NexusGenRootTypes['GetFollowsResponse']; // GetFollowsResponse!
    getFriendsBuyFeed: NexusGenRootTypes['GetFriendsBuyFeedResponse'][]; // [GetFriendsBuyFeedResponse!]!
    getHighlightedProfiles: NexusGenRootTypes['PublicProfileInfo'][]; // [PublicProfileInfo!]!
    getIntercomMobileToken: string; // String!
    getIsFirstSwapForToken: NexusGenRootTypes['IsFirstSwapTokenResponse']; // IsFirstSwapTokenResponse!
    getLargestHolders: NexusGenRootTypes['LargestHolder'][]; // [LargestHolder!]!
    getMarketCapsAndVolumes: NexusGenRootTypes['GetMarketCapsAndVolumesResponse'][]; // [GetMarketCapsAndVolumesResponse!]!
    getMemecoinOfTheDay: NexusGenRootTypes['GetMemecoinOfTheDayResponse']; // GetMemecoinOfTheDayResponse!
    getMobileUpdate: NexusGenRootTypes['GetMobileUpdateResponse']; // GetMobileUpdateResponse!
    getMyAirdropClaims: NexusGenRootTypes['GetMyAirdropClaimsResponse']; // GetMyAirdropClaimsResponse!
    getNewsForTickers: NexusGenRootTypes['GetNewsForTickersResponse']; // GetNewsForTickersResponse!
    getNotifications: NexusGenRootTypes['Notification'][]; // [Notification!]!
    getNumUnreadFriendsTxns: number; // Int!
    getNumUnreadNotifications: number; // Int!
    getOfframpOrderDetails: NexusGenRootTypes['GetOfframpOrderDetailsResponse']; // GetOfframpOrderDetailsResponse!
    getOfframpUrl: NexusGenRootTypes['GetOfframpUrlResponse']; // GetOfframpUrlResponse!
    getOnrampUrl: NexusGenRootTypes['GetOnrampUrlResponse']; // GetOnrampUrlResponse!
    getPaymentMethods: NexusGenRootTypes['PaymentMethod'][]; // [PaymentMethod!]!
    getPortfolio: NexusGenRootTypes['PortfolioResponse']; // PortfolioResponse!
    getPositions: NexusGenRootTypes['GetPositionsResponse']; // GetPositionsResponse!
    getProfile: NexusGenRootTypes['GetProfileResponse']; // GetProfileResponse!
    getQuote: NexusGenRootTypes['GetQuoteResponse']; // GetQuoteResponse!
    getReferralCommissions: NexusGenRootTypes['ReferralCommission'][]; // [ReferralCommission!]!
    getReferrals: NexusGenRootTypes['Referral'][]; // [Referral!]!
    getReferralsInfo: NexusGenRootTypes['GetReferralEarningsResponse']; // GetReferralEarningsResponse!
    getStripeOnrampSession: string; // String!
    getSwap: NexusGenRootTypes['Swap']; // Swap!
    getSwapTransaction: NexusGenRootTypes['GetSwapTransactionResponse']; // GetSwapTransactionResponse!
    getToken: NexusGenRootTypes['TokenInfo']; // TokenInfo!
    getTokenBySlug: NexusGenRootTypes['TokenInfo']; // TokenInfo!
    getTokenChart: NexusGenRootTypes['GetTokenChartResponse']; // GetTokenChartResponse!
    getTokenHolding: NexusGenRootTypes['TokenPosition']; // TokenPosition!
    getTokenInfo: NexusGenRootTypes['GetTokenInfoResponse'] | null; // GetTokenInfoResponse
    getTokenPermissions: NexusGenRootTypes['TokenPermission'][]; // [TokenPermission!]!
    getTokenPrice: NexusGenRootTypes['GetTokenPriceResponse']; // GetTokenPriceResponse!
    getTokensByVotes: NexusGenRootTypes['TokenData'][]; // [TokenData!]!
    getTransactionStatus: NexusGenEnums['TransactionStatusEnum']; // TransactionStatusEnum!
    getTransactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
    getUserBuyFeed: NexusGenRootTypes['GetFriendsBuyFeedResponse'][]; // [GetFriendsBuyFeedResponse!]!
    getWatchlistAssetsForUser: NexusGenRootTypes['WatchlistAssetWithInfo'][]; // [WatchlistAssetWithInfo!]!
    getWithdrawal: NexusGenRootTypes['Withdrawal']; // Withdrawal!
    getWithdrawalTransaction: NexusGenRootTypes['GetWithdrawalTransactionResponse']; // GetWithdrawalTransactionResponse!
    me: NexusGenRootTypes['User'] | null; // User
    myTokenPermissions: NexusGenRootTypes['TokenPermission'][]; // [TokenPermission!]!
    searchTokens: NexusGenRootTypes['SearchTokensResponse']; // SearchTokensResponse!
  }
  Quote: { // field return type
    chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    fees: NexusGenRootTypes['QuoteFee'][] | null; // [QuoteFee!]
    id: string; // ID!
    provider: NexusGenEnums['TradingProviderEnum']; // TradingProviderEnum!
    providerImageUrl: string | null; // String
    receiveAmount: number; // Float!
    receiveFiatAmountCents: number; // Float!
    receiveFiatCurrency: string; // String!
    receiveIconImageUrl: string | null; // String
    receiveSymbol: string | null; // String
    recommendedSlippageBps: number | null; // Float
    sendAmount: number; // Float!
    sendFiatAmountCents: number; // Float!
    sendFiatCurrency: string; // String!
    sendIconImageUrl: string | null; // String
    sendSymbol: string | null; // String
  }
  QuoteFee: { // field return type
    amount: number; // Float!
    feeAmountCents: number; // Float!
    feeName: string; // String!
    message: string | null; // String
    symbol: string; // String!
    tokenContractAddress: string; // String!
  }
  Referral: { // field return type
    id: string; // ID!
  }
  ReferralCommission: { // field return type
    commissionFiatAmountCents: number; // Float!
    createdAt: string; // String!
    id: string; // String!
  }
  ReferralPayout: { // field return type
    createdAt: string; // String!
    id: string; // String!
  }
  Relationship: { // field return type
    fromUserId: string; // String!
    notifyOnBuy: boolean; // Boolean!
    toUserId: string; // String!
  }
  SearchTokensResponse: { // field return type
    recommended: NexusGenRootTypes['TokenSearchResult'] | null; // TokenSearchResult
    tokens: NexusGenRootTypes['TokenSearchResult'][]; // [TokenSearchResult!]!
  }
  SimpleProfile: { // field return type
    avatarImageUrl: string | null; // String
    id: string; // String!
    name: string; // String!
    username: string; // String!
  }
  SubmitRawTransactionResponse: { // field return type
    signature: string; // String!
  }
  SubmitTransactionResponse: { // field return type
    signature: string; // String!
    swapId: string; // ID!
  }
  SubmitWithdrawalResponse: { // field return type
    signature: string; // String!
  }
  Swap: { // field return type
    blockExplorerName: string | null; // String
    blockExplorerUrl: string | null; // String
    chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    createdAt: string; // String!
    failedReason: string | null; // String
    hash: string; // String!
    id: string; // String!
    receiveSymbol: string; // String!
    receiveTokenContractAddress: string; // String!
    sendSymbol: string; // String!
    sendTokenContractAddress: string; // String!
    status: NexusGenEnums['SwapStatusEnum']; // SwapStatusEnum!
    type: NexusGenEnums['SwapTypeEnum']; // SwapTypeEnum!
  }
  Token: { // field return type
    coingeckoId: string | null; // String
    contractAddress: string; // String!
    iconImageUrl: string; // String!
    id: string; // ID!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
  }
  TokenChartPoint: { // field return type
    close: number | null; // Float
    high: number | null; // Float
    low: number | null; // Float
    open: number | null; // Float
    timestamp: NexusGenScalars['Date']; // Date!
    utcTimeSeconds: number; // Float!
    value: number | null; // Float
    valueCents: number | null; // Float
  }
  TokenData: { // field return type
    coinGeckoTokenId: string | null; // String
    contractAddress: string; // String!
    iconImageUrl: string; // String!
    id: string; // ID!
    isClaimed: boolean | null; // Boolean
    isDead: boolean | null; // Boolean
    isMovementVerified: boolean | null; // Boolean
    isStrict: boolean | null; // Boolean
    marketCap: string | null; // String
    name: string; // String!
    priceChangePercentage24h: number | null; // Float
    priceChangePercentage24hFormatted: string | null; // String
    priceFormatted: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    vol24h: string | null; // String
  }
  TokenInfo: { // field return type
    coingeckoId: string | null; // String
    contractAddress: string; // String!
    iconImageUrl: string | null; // String
    isClaimed: boolean | null; // Boolean
    isMovementVerified: boolean | null; // Boolean
    isStrict: boolean | null; // Boolean
    name: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
    tokenId: string | null; // ID
    warning: NexusGenRootTypes['TokenWarning'] | null; // TokenWarning
  }
  TokenPermission: { // field return type
    claimCode: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    token: NexusGenRootTypes['Token']; // Token!
    tokenId: string; // ID!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // ID
  }
  TokenPosition: { // field return type
    amount: number; // Float!
    avgCostBasisPerUnitCents: number | null; // Float
    avgCostBasisPerUnitFormatted: string | null; // String
    coingeckoTokenId: string | null; // String
    contractAddress: string; // String!
    fiatAmountCents: number; // Float!
    fiatAmountFormatted: string; // String!
    fiatCurrency: string; // String!
    iconImageUrl: string | null; // String
    isNativeToken: boolean; // Boolean!
    isPending: boolean | null; // Boolean
    priceCents: number; // Float!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string | null; // String
    totalCostBasisCents: number | null; // Float
    totalCostBasisFormatted: string | null; // String
    totalReturnFiatCents: number | null; // Float
    totalReturnFiatFormatted: string | null; // String
    totalReturnPercentage: number | null; // Float
  }
  TokenSearchResult: { // field return type
    coingeckoId: string | null; // String
    contractAddress: string; // String!
    iconImageUrl: string | null; // String
    name: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string; // String!
  }
  TokenWarning: { // field return type
    message: string | null; // String
    reason: NexusGenEnums['TokenWarningReasonEnum']; // TokenWarningReasonEnum!
    severity: NexusGenEnums['TokenWarningSeverityEnum']; // TokenWarningSeverityEnum!
  }
  Transaction: { // field return type
    blockExplorerUrl: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    description: string | null; // String
    feePaidAmount: number; // Float!
    hash: string; // String!
    id: string; // String!
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    transfers: NexusGenRootTypes['Transfer'][]; // [Transfer!]!
    type: NexusGenEnums['TransactionTypeEnum']; // TransactionTypeEnum!
  }
  Transfer: { // field return type
    amount: number; // Float!
    contractAddress: string; // String!
    from: string | null; // String
    iconImageUrl: string | null; // String
    symbol: string | null; // String
    to: string | null; // String
    type: NexusGenEnums['TransferTypeEnum']; // TransferTypeEnum!
  }
  UpdateTokenCategoriesResponse: { // field return type
    categories: NexusGenRootTypes['CategoryMetadata'][]; // [CategoryMetadata!]!
  }
  UploadFileResponse: { // field return type
    fileName: string; // String!
    objectFileKey: string; // String!
    url: string; // String!
  }
  User: { // field return type
    authProvider: NexusGenEnums['UserAuthProviderEnum']; // UserAuthProviderEnum!
    authProviderId: string; // String!
    avatarImageUrl: string | null; // String
    biometricPublicKey: string | null; // String
    canTradeMobile: boolean | null; // Boolean
    createdAt: NexusGenScalars['Date']; // Date!
    description: string; // String!
    email: string; // String!
    hasMobile: boolean | null; // Boolean
    hasPushNotificationsEnabled: boolean | null; // Boolean
    hasTwoFactorAuth: boolean; // Boolean!
    hasVerifiedPhoneNumber: boolean; // Boolean!
    id: string; // String!
    intercomMobileUserHash: string | null; // String
    intercomUserHash: string | null; // String
    isAffiliate: boolean; // Boolean!
    isSuperuser: boolean; // Boolean!
    name: string | null; // String
    number: number | null; // Float
    numberMobileUser: number | null; // Float
    phoneNumber: string | null; // String
    referralCode: string | null; // String
    referredByCode: string | null; // String
    referredByName: string | null; // String
    role: string | null; // String
    status: NexusGenEnums['UserStatusEnum']; // UserStatusEnum!
    swapPrivacyDefault: NexusGenEnums['SwapPrivacyEnum']; // SwapPrivacyEnum!
    updatedAt: NexusGenScalars['Date']; // Date!
    username: string; // String!
    wallets: NexusGenRootTypes['UserWallet'][] | null; // [UserWallet!]
  }
  UserWallet: { // field return type
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    publicKey: string; // String!
  }
  VerifyBiometricResponse: { // field return type
    message: string | null; // String
    status: string; // String!
  }
  VoteForTokenResponse: { // field return type
    numVotes: number; // Int!
    tokenId: string; // ID!
  }
  Wallet: { // field return type
    isFunded: boolean; // Boolean!
    provider: string; // String!
    publicAddress: string; // String!
  }
  WatchlistAsset: { // field return type
    contractAddress: string; // String!
    provider: string; // String!
    userId: string; // String!
  }
  WatchlistAssetWithInfo: { // field return type
    contractAddress: string; // String!
    iconImageUrl: string | null; // String
    id: string; // String!
    name: string | null; // String
    price: number | null; // Float
    priceChangePercentage24h: number | null; // Float
    priceChangePercentage24hFormatted: string | null; // String
    priceFormatted: string | null; // String
    provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    symbol: string | null; // String
  }
  Withdrawal: { // field return type
    amount: number; // Float!
    createdAt: string; // String!
    hash: string | null; // String
    id: string; // ID!
    kadoOrderId: string | null; // String
    status: NexusGenEnums['WithdrawalStatusEnum']; // WithdrawalStatusEnum!
    trackingUrl: string | null; // String
    updatedAt: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Airdrop: { // field return type name
    amountPerClaim: 'Float'
    endDate: 'Date'
    hasClaimed: 'Boolean'
    iconImageUrl: 'String'
    id: 'ID'
    invitedAmount: 'Float'
    inviterAmount: 'Float'
    startDate: 'Date'
    symbol: 'String'
  }
  AirdropClaim: { // field return type name
    airdrop: 'Airdrop'
    airdropId: 'ID'
    code: 'String'
    id: 'ID'
    invitedUsername: 'String'
    inviterUsername: 'String'
    isUserIn: 'Boolean'
    status: 'AirdropClaimStatusEnum'
    transactionHash: 'String'
    userEarnAmount: 'Float'
  }
  AssetAccountBreakdown: { // field return type name
    accountId: 'String'
    amount: 'Float'
    assetId: 'String'
    avgBasisFiatAmount: 'Float'
    costBasisFiatAmount: 'Float'
    currentFiatAmount: 'Float'
    currentTokenPriceFiatAmount: 'Float'
    estimatedCurrentValue: 'Float'
    gainOrLossFiatAmount: 'Float'
    hasPrice: 'Boolean'
    percentChangeAllTime: 'Float'
  }
  BasicCompetitionDetails: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    name: 'String'
    token1Id: 'ID'
    token2Id: 'ID'
  }
  BlueChipData: { // field return type name
    contractAddress: 'String'
    iconImageUrl: 'String'
    isClaimed: 'Boolean'
    isMovementVerified: 'Boolean'
    isStrict: 'Boolean'
    name: 'String'
    priceChangePercentage24h: 'Float'
    priceChangePercentage24hFormatted: 'String'
    priceFormatted: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
  }
  CategoryEntry: { // field return type name
    category: 'CategoryEnum'
    categoryName: 'String'
    slug: 'String'
    tokenId: 'ID'
  }
  CategoryMetadata: { // field return type name
    bannerImageUrl: 'String'
    categoryName: 'String'
    description: 'String'
    iconImageUrl: 'String'
    slug: 'String'
    type: 'CategoryEnum'
  }
  CategorySummary: { // field return type name
    bannerImageUrl: 'String'
    categoryName: 'String'
    description: 'String'
    iconImageUrl: 'String'
    slug: 'String'
    tokens: 'DiscoverySplashResult'
    totalMarketCap: 'Float'
    totalMarketCapChange: 'Float'
    totalMarketCapChangePercentage: 'Float'
    totalVol24h: 'Float'
    type: 'CategoryEnum'
  }
  ClaimCodeResponse: { // field return type name
    message: 'String'
  }
  CreateUserResponse: { // field return type name
    token: 'String'
    user: 'User'
  }
  Deposit: { // field return type name
    amount: 'Float'
    createdAt: 'String'
    hasSentFunds: 'Boolean'
    id: 'ID'
    paypalOrderId: 'String'
    source: 'String'
    sourceType: 'String'
    status: 'String'
    transactionHash: 'String'
    updatedAt: 'String'
  }
  DepositAddressResponse: { // field return type name
    isFunded: 'Boolean'
    nativeAmount: 'Float'
    provider: 'String'
    publicAddress: 'String'
  }
  DiscoveryCategory: { // field return type name
    bannerImageUrl: 'String'
    categoryName: 'String'
    description: 'String'
    iconImageUrl: 'String'
    slug: 'String'
    tokens: 'DiscoverySplashResult'
    totalMarketCap: 'Float'
    totalMarketCapChange: 'Float'
    totalVol24h: 'Float'
    type: 'CategoryEnum'
  }
  DiscoveryResult: { // field return type name
    coinGeckoTokenId: 'String'
    contractAddress: 'String'
    iconImageUrl: 'String'
    isClaimed: 'Boolean'
    isDead: 'Boolean'
    isMovementVerified: 'Boolean'
    isStrict: 'Boolean'
    marketCap: 'String'
    name: 'String'
    price: 'Float'
    priceChangePercentage24h: 'Float'
    priceChangePercentage24hFormatted: 'String'
    priceFormatted: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
    type: 'DiscoveryResultTypeEnum'
    vol24h: 'String'
  }
  DiscoverySplashResult: { // field return type name
    coinGeckoTokenId: 'String'
    contractAddress: 'String'
    iconImageUrl: 'String'
    id: 'ID'
    isClaimed: 'Boolean'
    isDead: 'Boolean'
    isMovementVerified: 'Boolean'
    isStrict: 'Boolean'
    marketCap: 'String'
    name: 'String'
    priceChangePercentage24h: 'Float'
    priceChangePercentage24hFormatted: 'String'
    priceFormatted: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
    type: 'DiscoveryResultTypeEnum'
    vol24h: 'String'
  }
  DiscoveryUserResult: { // field return type name
    name: 'String'
    username: 'String'
  }
  Event: { // field return type name
    createdAt: 'Date'
    iconImageUrl: 'String'
    id: 'ID'
    link: 'String'
    startTime: 'Date'
    title: 'String'
    tokenId: 'ID'
    updatedAt: 'Date'
  }
  FavoriteMemecoin: { // field return type name
    contractAddress: 'String'
    iconImageUrl: 'String'
    name: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
  }
  FeedComment: { // field return type name
    content: 'String'
    createdAt: 'Date'
    feedCommentId: 'ID'
    feedPostId: 'ID'
    id: 'ID'
    numComments: 'Int'
    numLikes: 'Int'
    updatedAt: 'Date'
    userId: 'ID'
  }
  FeedLike: { // field return type name
    createdAt: 'Date'
    feedCommentId: 'ID'
    feedPostId: 'ID'
    id: 'ID'
    updatedAt: 'Date'
    userId: 'ID'
  }
  FeedPost: { // field return type name
    content: 'String'
    createdAt: 'Date'
    id: 'ID'
    numComments: 'Int'
    numLikes: 'Int'
    updatedAt: 'Date'
    userId: 'ID'
  }
  FullCompetitionDetails: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    name: 'String'
    token1: 'TokenData'
    token2: 'TokenData'
  }
  FullFeedPost: { // field return type name
    content: 'String'
    createdAt: 'Date'
    id: 'ID'
    numComments: 'Int'
    numLikes: 'Int'
    profile: 'SimpleProfile'
    updatedAt: 'Date'
    userId: 'ID'
  }
  GenerateUsernameResponse: { // field return type name
    name: 'String'
    username: 'String'
  }
  GetAirdropInfoResponse: { // field return type name
    hasClaimedAsInvited: 'Boolean'
    hasClaimedAsInviter: 'Boolean'
    invitedAirdropClaimId: 'ID'
    inviterAirdropClaimId: 'ID'
  }
  GetAvailableOnrampsResponse: { // field return type name
    isCoinbasePayEnabled: 'Boolean'
    isKadoEnabled: 'Boolean'
    isMesoEnabled: 'Boolean'
    isOnramperEnabled: 'Boolean'
    isVenmoEnabled: 'Boolean'
  }
  GetBlueChipsResponse: { // field return type name
    results: 'BlueChipData'
  }
  GetCategoryTypesResponse: { // field return type name
    categories: 'CategoryMetadata'
  }
  GetCloseAccountTransactionResponse: { // field return type name
    blockHeight: 'Float'
    blockhash: 'String'
    rawTransaction: 'String'
  }
  GetDiscoveryResultsResponse: { // field return type name
    categories: 'CategoryMetadata'
    results: 'DiscoveryResult'
    users: 'DiscoveryUserResult'
  }
  GetDiscoverySplashResponse: { // field return type name
    blueChips: 'DiscoverySplashResult'
    categories: 'DiscoveryCategory'
    competitions: 'FullCompetitionDetails'
    results: 'DiscoverySplashResult'
  }
  GetEventsForCategoryResponse: { // field return type name
    events: 'Event'
  }
  GetEventsForTokensResponse: { // field return type name
    events: 'Event'
  }
  GetFollowsResponse: { // field return type name
    followers: 'PublicProfileInfo'
    following: 'PublicProfileInfo'
  }
  GetFriendsBuyFeedResponse: { // field return type name
    chain: 'AccountProviderEnum'
    contractAddress: 'String'
    createdAt: 'Date'
    iconImageUrl: 'String'
    id: 'ID'
    isYou: 'Boolean'
    name: 'String'
    symbol: 'String'
    username: 'String'
  }
  GetMarketCapsAndVolumesResponse: { // field return type name
    contractAddress: 'String'
    marketCap: 'String'
    provider: 'AccountProviderEnum'
    vol24h: 'String'
  }
  GetMemecoinOfTheDayResponse: { // field return type name
    color1: 'String'
    color2: 'String'
    contractAddress: 'String'
    description: 'String'
    iconImageUrl: 'String'
    name: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
    url: 'String'
  }
  GetMobileUpdateResponse: { // field return type name
    latestVersion: 'String'
    shouldUpdate: 'Boolean'
    userVersion: 'String'
  }
  GetMyAirdropClaimsResponse: { // field return type name
    claims: 'AirdropClaim'
    pending: 'AirdropClaim'
  }
  GetNewsForTickersResponse: { // field return type name
    news: 'NewsForTickers'
  }
  GetOfframpOrderDetailsResponse: { // field return type name
    amount: 'Float'
    chain: 'AccountProviderEnum'
    depositAddress: 'String'
    id: 'String'
    tokenContractAddress: 'String'
    trackingUrl: 'String'
  }
  GetOfframpUrlResponse: { // field return type name
    provider: 'String'
    url: 'String'
  }
  GetOnrampUrlResponse: { // field return type name
    provider: 'String'
    url: 'String'
  }
  GetPositionsResponse: { // field return type name
    positions: 'PortfolioPosition'
  }
  GetProfileResponse: { // field return type name
    avatarImageUrl: 'String'
    description: 'String'
    id: 'ID'
    isFollowing: 'Boolean'
    name: 'String'
    numFollowers: 'Int'
    numFollowing: 'Int'
    relationship: 'Relationship'
    username: 'String'
  }
  GetQuoteResponse: { // field return type name
    bestQuote: 'Quote'
    timestamp: 'Date'
  }
  GetReferralEarningsResponse: { // field return type name
    totalEarningsCents: 'Float'
    totalReferrals: 'Float'
  }
  GetSwapTransactionResponse: { // field return type name
    solanaBlockhash: 'String'
    solanaLastValidBlockHeight: 'Float'
    txn: 'String'
    wallet: 'String'
  }
  GetTokenChartResponse: { // field return type name
    points: 'TokenChartPoint'
    type: 'ChartTypeEnum'
  }
  GetTokenInfoResponse: { // field return type name
    about: 'GetTokenInfoResponseAbout'
    bestLpPoolAddress: 'String'
    security: 'GetTokenInfoResponseSecurity'
    stats: 'GetTokenInfoResponseStats'
    warning: 'TokenWarning'
  }
  GetTokenInfoResponseAbout: { // field return type name
    address: 'String'
    bannerUrl: 'String'
    categories: 'CategoryEntry'
    description: 'String'
    holder: 'Int'
    irlName: 'String'
    isClaimed: 'Boolean'
    links: 'GetTokenOverviewResponseExtensions'
    moreLinks: 'MemecoinLink'
    numMentions: 'Int'
  }
  GetTokenInfoResponseSecurity: { // field return type name
    creationTime: 'String'
    freezeable: 'Boolean'
    mintTime: 'String'
    showTop10: 'Boolean'
    top10HolderPercent: 'Float'
    top10UserPercent: 'Float'
  }
  GetTokenInfoResponseStats: { // field return type name
    buys24h: 'Int'
    isLiquidityLocked: 'Boolean'
    liquidity: 'Float'
    marketCap: 'Float'
    sells24h: 'Int'
    traders24h: 'Int'
    trades24h: 'Int'
    v24hUSD: 'Float'
  }
  GetTokenOverviewResponseExtensions: { // field return type name
    coingecko: 'String'
    dexscreener: 'String'
    discord: 'String'
    medium: 'String'
    telegram: 'String'
    twitter: 'String'
    website: 'String'
  }
  GetTokenPriceResponse: { // field return type name
    currentPrice: 'String'
    currentPriceCents: 'Float'
  }
  GetWithdrawalTransactionResponse: { // field return type name
    solanaBlockhash: 'String'
    solanaLastValidBlockHeight: 'Float'
    txn: 'String'
    wallet: 'String'
  }
  IsFirstSwapTokenResponse: { // field return type name
    isFirstSwap: 'Boolean'
    totalSwaps: 'Float'
  }
  LargestHolder: { // field return type name
    accountKey: 'String'
    amount: 'String'
    percentage: 'Float'
    tokenAccountKey: 'String'
  }
  LoginResponse: { // field return type name
    token: 'String'
    user: 'User'
  }
  MemecoinLink: { // field return type name
    alwaysShow: 'Boolean'
    type: 'MemecoinLinkTypeEnum'
    url: 'String'
  }
  Mutation: { // field return type name
    addOrRemoveFavorite: 'FavoriteMemecoin'
    claimAirdrop: 'AirdropClaim'
    claimCode: 'ClaimCodeResponse'
    claimInitialDeposit: 'String'
    claimPermission: 'TokenPermission'
    createBlacklistToken: 'String'
    createDeposit: 'Deposit'
    createEvent: 'Event'
    createFeedPost: 'FullFeedPost'
    createSwapEvent: 'String'
    createUser: 'CreateUserResponse'
    createWatchlistAssetForUser: 'String'
    deleteEvent: 'String'
    deleteMe: 'String'
    deleteWatchlistAssetForUser: 'String'
    followProfile: 'String'
    getAuthToken: 'String'
    getCloseAccountTransaction: 'GetCloseAccountTransactionResponse'
    getUploadUrl: 'UploadFileResponse'
    invitePermission: 'TokenPermission'
    leaveFeedback: 'String'
    logMagicIssue: 'String'
    login: 'LoginResponse'
    readNotifications: 'String'
    refreshPortfolio: 'String'
    sendVerification: 'String'
    submitRawTransaction: 'SubmitRawTransactionResponse'
    submitTransaction: 'SubmitTransactionResponse'
    submitTransactionV2: 'SubmitTransactionResponse'
    submitWithdrawal: 'SubmitWithdrawalResponse'
    submitWithdrawalV2: 'Withdrawal'
    textDownloadLink: 'String'
    toggleNotifyOnBuy: 'Relationship'
    unfollowProfile: 'String'
    updateProfile: 'String'
    updateReadFriendsUntil: 'String'
    updateToken: 'Token'
    updateTokenCategories: 'UpdateTokenCategoriesResponse'
    updateUser: 'User'
    uploadFile: 'UploadFileResponse'
    upsertAirdropClaim: 'AirdropClaim'
    verifyBiometric: 'VerifyBiometricResponse'
    verifyPhoneNumber: 'User'
  }
  NewsForTickers: { // field return type name
    date: 'String'
    imageUrl: 'String'
    newsUrl: 'String'
    sentiment: 'String'
    sourceName: 'String'
    text: 'String'
    tickers: 'String'
    title: 'String'
    topics: 'String'
    type: 'String'
  }
  Notification: { // field return type name
    createdAt: 'Date'
    followerUserId: 'ID'
    followerUserName: 'String'
    followerUserUsername: 'String'
    hasRead: 'Boolean'
    hasSent: 'Boolean'
    iconImageUrl: 'String'
    id: 'ID'
    subtitle: 'String'
    title: 'String'
    tokenContractAddress: 'String'
    tokenProvider: 'AccountProviderEnum'
    userId: 'String'
  }
  PaymentMethod: { // field return type name
    last4: 'String'
    paymentMethodId: 'String'
    source: 'String'
  }
  PortfolioPosition: { // field return type name
    amount: 'Float'
    canSelectToken: 'Boolean'
    contractAddress: 'String'
    dailyChangePerUnitCents: 'Float'
    dailyChangePercentage: 'Float'
    dailyFiatAmountCents: 'Float'
    dailyPercentageFormatted: 'String'
    fiatAmountCents: 'Float'
    fiatCurrency: 'String'
    iconImageUrl: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
  }
  PortfolioResponse: { // field return type name
    dailyChangeFiatAmount: 'String'
    dailyChangeFiatAmountCents: 'Float'
    dailyChangePercentageFormatted: 'String'
    positions: 'PortfolioPosition'
    totalFiatAmount: 'String'
    totalFiatAmountCents: 'Int'
  }
  PublicProfileInfo: { // field return type name
    avatarImageUrl: 'String'
    id: 'ID'
    name: 'String'
    numberOfFollowers: 'Float'
    username: 'String'
  }
  Query: { // field return type name
    checkCode: 'Boolean'
    checkValidUsername: 'String'
    generateUsername: 'String'
    generateUsernameV2: 'GenerateUsernameResponse'
    getAirdropClaimByCode: 'AirdropClaim'
    getAirdropClaimById: 'AirdropClaim'
    getAirdropInfo: 'GetAirdropInfoResponse'
    getAvailableOnramps: 'GetAvailableOnrampsResponse'
    getBlueChips: 'GetBlueChipsResponse'
    getCategories: 'CategorySummary'
    getCategory: 'DiscoveryCategory'
    getCategoryTypes: 'GetCategoryTypesResponse'
    getClaimForAirdrop: 'AirdropClaim'
    getCurrentAirdrop: 'Airdrop'
    getDepositAddress: 'DepositAddressResponse'
    getDiscoveryResults: 'GetDiscoveryResultsResponse'
    getDiscoverySplash: 'GetDiscoverySplashResponse'
    getEventsForCategory: 'GetEventsForCategoryResponse'
    getEventsForTokens: 'GetEventsForTokensResponse'
    getFavoriteMemecoinInfo: 'FavoriteMemecoin'
    getFavoriteMemecoinsForUser: 'FavoriteMemecoin'
    getFeedPosts: 'FullFeedPost'
    getFollows: 'GetFollowsResponse'
    getFriendsBuyFeed: 'GetFriendsBuyFeedResponse'
    getHighlightedProfiles: 'PublicProfileInfo'
    getIntercomMobileToken: 'String'
    getIsFirstSwapForToken: 'IsFirstSwapTokenResponse'
    getLargestHolders: 'LargestHolder'
    getMarketCapsAndVolumes: 'GetMarketCapsAndVolumesResponse'
    getMemecoinOfTheDay: 'GetMemecoinOfTheDayResponse'
    getMobileUpdate: 'GetMobileUpdateResponse'
    getMyAirdropClaims: 'GetMyAirdropClaimsResponse'
    getNewsForTickers: 'GetNewsForTickersResponse'
    getNotifications: 'Notification'
    getNumUnreadFriendsTxns: 'Int'
    getNumUnreadNotifications: 'Int'
    getOfframpOrderDetails: 'GetOfframpOrderDetailsResponse'
    getOfframpUrl: 'GetOfframpUrlResponse'
    getOnrampUrl: 'GetOnrampUrlResponse'
    getPaymentMethods: 'PaymentMethod'
    getPortfolio: 'PortfolioResponse'
    getPositions: 'GetPositionsResponse'
    getProfile: 'GetProfileResponse'
    getQuote: 'GetQuoteResponse'
    getReferralCommissions: 'ReferralCommission'
    getReferrals: 'Referral'
    getReferralsInfo: 'GetReferralEarningsResponse'
    getStripeOnrampSession: 'String'
    getSwap: 'Swap'
    getSwapTransaction: 'GetSwapTransactionResponse'
    getToken: 'TokenInfo'
    getTokenBySlug: 'TokenInfo'
    getTokenChart: 'GetTokenChartResponse'
    getTokenHolding: 'TokenPosition'
    getTokenInfo: 'GetTokenInfoResponse'
    getTokenPermissions: 'TokenPermission'
    getTokenPrice: 'GetTokenPriceResponse'
    getTokensByVotes: 'TokenData'
    getTransactionStatus: 'TransactionStatusEnum'
    getTransactions: 'Transaction'
    getUserBuyFeed: 'GetFriendsBuyFeedResponse'
    getWatchlistAssetsForUser: 'WatchlistAssetWithInfo'
    getWithdrawal: 'Withdrawal'
    getWithdrawalTransaction: 'GetWithdrawalTransactionResponse'
    me: 'User'
    myTokenPermissions: 'TokenPermission'
    searchTokens: 'SearchTokensResponse'
  }
  Quote: { // field return type name
    chain: 'AccountProviderEnum'
    fees: 'QuoteFee'
    id: 'ID'
    provider: 'TradingProviderEnum'
    providerImageUrl: 'String'
    receiveAmount: 'Float'
    receiveFiatAmountCents: 'Float'
    receiveFiatCurrency: 'String'
    receiveIconImageUrl: 'String'
    receiveSymbol: 'String'
    recommendedSlippageBps: 'Float'
    sendAmount: 'Float'
    sendFiatAmountCents: 'Float'
    sendFiatCurrency: 'String'
    sendIconImageUrl: 'String'
    sendSymbol: 'String'
  }
  QuoteFee: { // field return type name
    amount: 'Float'
    feeAmountCents: 'Float'
    feeName: 'String'
    message: 'String'
    symbol: 'String'
    tokenContractAddress: 'String'
  }
  Referral: { // field return type name
    id: 'ID'
  }
  ReferralCommission: { // field return type name
    commissionFiatAmountCents: 'Float'
    createdAt: 'String'
    id: 'String'
  }
  ReferralPayout: { // field return type name
    createdAt: 'String'
    id: 'String'
  }
  Relationship: { // field return type name
    fromUserId: 'String'
    notifyOnBuy: 'Boolean'
    toUserId: 'String'
  }
  SearchTokensResponse: { // field return type name
    recommended: 'TokenSearchResult'
    tokens: 'TokenSearchResult'
  }
  SimpleProfile: { // field return type name
    avatarImageUrl: 'String'
    id: 'String'
    name: 'String'
    username: 'String'
  }
  SubmitRawTransactionResponse: { // field return type name
    signature: 'String'
  }
  SubmitTransactionResponse: { // field return type name
    signature: 'String'
    swapId: 'ID'
  }
  SubmitWithdrawalResponse: { // field return type name
    signature: 'String'
  }
  Swap: { // field return type name
    blockExplorerName: 'String'
    blockExplorerUrl: 'String'
    chain: 'AccountProviderEnum'
    createdAt: 'String'
    failedReason: 'String'
    hash: 'String'
    id: 'String'
    receiveSymbol: 'String'
    receiveTokenContractAddress: 'String'
    sendSymbol: 'String'
    sendTokenContractAddress: 'String'
    status: 'SwapStatusEnum'
    type: 'SwapTypeEnum'
  }
  Token: { // field return type name
    coingeckoId: 'String'
    contractAddress: 'String'
    iconImageUrl: 'String'
    id: 'ID'
    provider: 'AccountProviderEnum'
    symbol: 'String'
  }
  TokenChartPoint: { // field return type name
    close: 'Float'
    high: 'Float'
    low: 'Float'
    open: 'Float'
    timestamp: 'Date'
    utcTimeSeconds: 'Float'
    value: 'Float'
    valueCents: 'Float'
  }
  TokenData: { // field return type name
    coinGeckoTokenId: 'String'
    contractAddress: 'String'
    iconImageUrl: 'String'
    id: 'ID'
    isClaimed: 'Boolean'
    isDead: 'Boolean'
    isMovementVerified: 'Boolean'
    isStrict: 'Boolean'
    marketCap: 'String'
    name: 'String'
    priceChangePercentage24h: 'Float'
    priceChangePercentage24hFormatted: 'String'
    priceFormatted: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
    vol24h: 'String'
  }
  TokenInfo: { // field return type name
    coingeckoId: 'String'
    contractAddress: 'String'
    iconImageUrl: 'String'
    isClaimed: 'Boolean'
    isMovementVerified: 'Boolean'
    isStrict: 'Boolean'
    name: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
    tokenId: 'ID'
    warning: 'TokenWarning'
  }
  TokenPermission: { // field return type name
    claimCode: 'String'
    createdAt: 'Date'
    id: 'ID'
    token: 'Token'
    tokenId: 'ID'
    user: 'User'
    userId: 'ID'
  }
  TokenPosition: { // field return type name
    amount: 'Float'
    avgCostBasisPerUnitCents: 'Float'
    avgCostBasisPerUnitFormatted: 'String'
    coingeckoTokenId: 'String'
    contractAddress: 'String'
    fiatAmountCents: 'Float'
    fiatAmountFormatted: 'String'
    fiatCurrency: 'String'
    iconImageUrl: 'String'
    isNativeToken: 'Boolean'
    isPending: 'Boolean'
    priceCents: 'Float'
    provider: 'AccountProviderEnum'
    symbol: 'String'
    totalCostBasisCents: 'Float'
    totalCostBasisFormatted: 'String'
    totalReturnFiatCents: 'Float'
    totalReturnFiatFormatted: 'String'
    totalReturnPercentage: 'Float'
  }
  TokenSearchResult: { // field return type name
    coingeckoId: 'String'
    contractAddress: 'String'
    iconImageUrl: 'String'
    name: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
  }
  TokenWarning: { // field return type name
    message: 'String'
    reason: 'TokenWarningReasonEnum'
    severity: 'TokenWarningSeverityEnum'
  }
  Transaction: { // field return type name
    blockExplorerUrl: 'String'
    createdAt: 'Date'
    description: 'String'
    feePaidAmount: 'Float'
    hash: 'String'
    id: 'String'
    provider: 'AccountProviderEnum'
    transfers: 'Transfer'
    type: 'TransactionTypeEnum'
  }
  Transfer: { // field return type name
    amount: 'Float'
    contractAddress: 'String'
    from: 'String'
    iconImageUrl: 'String'
    symbol: 'String'
    to: 'String'
    type: 'TransferTypeEnum'
  }
  UpdateTokenCategoriesResponse: { // field return type name
    categories: 'CategoryMetadata'
  }
  UploadFileResponse: { // field return type name
    fileName: 'String'
    objectFileKey: 'String'
    url: 'String'
  }
  User: { // field return type name
    authProvider: 'UserAuthProviderEnum'
    authProviderId: 'String'
    avatarImageUrl: 'String'
    biometricPublicKey: 'String'
    canTradeMobile: 'Boolean'
    createdAt: 'Date'
    description: 'String'
    email: 'String'
    hasMobile: 'Boolean'
    hasPushNotificationsEnabled: 'Boolean'
    hasTwoFactorAuth: 'Boolean'
    hasVerifiedPhoneNumber: 'Boolean'
    id: 'String'
    intercomMobileUserHash: 'String'
    intercomUserHash: 'String'
    isAffiliate: 'Boolean'
    isSuperuser: 'Boolean'
    name: 'String'
    number: 'Float'
    numberMobileUser: 'Float'
    phoneNumber: 'String'
    referralCode: 'String'
    referredByCode: 'String'
    referredByName: 'String'
    role: 'String'
    status: 'UserStatusEnum'
    swapPrivacyDefault: 'SwapPrivacyEnum'
    updatedAt: 'Date'
    username: 'String'
    wallets: 'UserWallet'
  }
  UserWallet: { // field return type name
    provider: 'AccountProviderEnum'
    publicKey: 'String'
  }
  VerifyBiometricResponse: { // field return type name
    message: 'String'
    status: 'String'
  }
  VoteForTokenResponse: { // field return type name
    numVotes: 'Int'
    tokenId: 'ID'
  }
  Wallet: { // field return type name
    isFunded: 'Boolean'
    provider: 'String'
    publicAddress: 'String'
  }
  WatchlistAsset: { // field return type name
    contractAddress: 'String'
    provider: 'String'
    userId: 'String'
  }
  WatchlistAssetWithInfo: { // field return type name
    contractAddress: 'String'
    iconImageUrl: 'String'
    id: 'String'
    name: 'String'
    price: 'Float'
    priceChangePercentage24h: 'Float'
    priceChangePercentage24hFormatted: 'String'
    priceFormatted: 'String'
    provider: 'AccountProviderEnum'
    symbol: 'String'
  }
  Withdrawal: { // field return type name
    amount: 'Float'
    createdAt: 'String'
    hash: 'String'
    id: 'ID'
    kadoOrderId: 'String'
    status: 'WithdrawalStatusEnum'
    trackingUrl: 'String'
    updatedAt: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addOrRemoveFavorite: { // args
      contractAddress: string; // String!
      iconImageUrl?: string | null; // String
      name: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      symbol: string; // String!
    }
    claimAirdrop: { // args
      airdropClaimId: string; // ID!
    }
    claimCode: { // args
      referralCode: string; // String!
    }
    claimPermission: { // args
      claimCode: string; // String!
    }
    createBlacklistToken: { // args
      coingeckoId?: string | null; // String
      contractAddress: string; // String!
      iconImageUrl: string; // String!
      name: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      symbol: string; // String!
    }
    createDeposit: { // args
      amount: number; // Float!
    }
    createEvent: { // args
      link: string; // String!
      startTime: NexusGenScalars['Date']; // Date!
      title: string; // String!
      tokenId: string; // ID!
      type: NexusGenEnums['EventTypeEnum']; // EventTypeEnum!
    }
    createFeedPost: { // args
      content: string; // String!
      tokenId: string; // ID!
    }
    createSwapEvent: { // args
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      durationSeconds: number; // Float!
      hash?: string | null; // String
      isTimedOut: boolean; // Boolean!
      status: NexusGenEnums['SwapStatusEnum']; // SwapStatusEnum!
    }
    createUser: { // args
      didToken: string; // String!
      name?: string | null; // String
      referralCode?: string | null; // String
      username?: string | null; // String
    }
    createWatchlistAssetForUser: { // args
      contractAddress: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      userId: string; // String!
    }
    deleteEvent: { // args
      id: string; // ID!
    }
    deleteWatchlistAssetForUser: { // args
      contractAddress: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      userId: string; // String!
    }
    followProfile: { // args
      username: string; // String!
    }
    invitePermission: { // args
      claimCode: string; // String!
      tokenId: string; // ID!
    }
    leaveFeedback: { // args
      message: string; // String!
    }
    logMagicIssue: { // args
      device?: string | null; // String
      ipAddress?: string | null; // String
      latency?: number | null; // Float
      message?: string | null; // String
    }
    login: { // args
      didToken: string; // String!
    }
    readNotifications: { // args
      notificationIds: string[]; // [ID!]!
    }
    sendVerification: { // args
      phoneNumber: string; // String!
    }
    submitRawTransaction: { // args
      blockhash: string; // String!
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      idempotency?: string | null; // String
      rawTransaction: string; // String!
    }
    submitTransaction: { // args
      blockHeight: number; // Float!
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      idempotency?: string | null; // String
      privacy?: NexusGenEnums['SwapPrivacyEnum'] | null; // SwapPrivacyEnum
      quoteId: string; // ID!
      rawTransaction: string; // String!
      type?: NexusGenEnums['SwapTypeEnum'] | null; // SwapTypeEnum
    }
    submitTransactionV2: { // args
      blockHeight: number; // Float!
      blockhash: string; // String!
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      idempotency?: string | null; // String
      privacy?: NexusGenEnums['SwapPrivacyEnum'] | null; // SwapPrivacyEnum
      quoteId: string; // ID!
      rawTransaction: string; // String!
      type?: NexusGenEnums['SwapTypeEnum'] | null; // SwapTypeEnum
    }
    submitWithdrawal: { // args
      blockHeight: number; // Float!
      blockhash?: string | null; // String
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      orderId?: string | null; // String
      rawTransaction: string; // String!
      type?: string | null; // String
    }
    submitWithdrawalV2: { // args
      blockHeight: number; // Float!
      blockhash?: string | null; // String
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      kadoOrderId?: string | null; // String
      rawTransaction: string; // String!
      type?: string | null; // String
    }
    textDownloadLink: { // args
      phoneNumber: string; // String!
    }
    toggleNotifyOnBuy: { // args
      fromUserId: string; // ID!
      notifyOnBuy: boolean; // Boolean!
      toUserId: string; // ID!
    }
    unfollowProfile: { // args
      username: string; // String!
    }
    updateProfile: { // args
      description?: string | null; // String
      name?: string | null; // String
      username?: string | null; // String
    }
    updateReadFriendsUntil: { // args
      newReadFriendsUntil: NexusGenScalars['Date']; // Date!
      userId: string; // ID!
    }
    updateToken: { // args
      bannerImageUrl?: string | null; // String
      description?: string | null; // String
      iconImageUrl?: string | null; // String
      irlName?: string | null; // String
      moreLinks?: NexusGenInputs['MemecoinLinkInput'][] | null; // [MemecoinLinkInput!]
      tokenId: string; // ID!
    }
    updateTokenCategories: { // args
      categories: NexusGenEnums['CategoryEnum'][]; // [CategoryEnum!]!
      tokenId: string; // ID!
    }
    updateUser: { // args
      avatarImageUrl?: string | null; // String
      biometricPublicKey?: string | null; // String
      hasMobile?: boolean | null; // Boolean
      hasPushNotifications?: boolean | null; // Boolean
      hasTwoFactorAuth?: boolean | null; // Boolean
      name?: string | null; // String
      swapPrivacyDefault?: NexusGenEnums['SwapPrivacyEnum'] | null; // SwapPrivacyEnum
      unreadCount?: number | null; // Int
    }
    uploadFile: { // args
      file: NexusGenScalars['Upload']; // Upload!
    }
    upsertAirdropClaim: { // args
      airdropId: string; // ID!
    }
    verifyBiometric: { // args
      payload: string; // String!
      signature: string; // String!
    }
    verifyPhoneNumber: { // args
      otpCode: string; // String!
      phoneNumber: string; // String!
    }
  }
  Query: {
    checkCode: { // args
      referralCode: string; // String!
    }
    checkValidUsername: { // args
      username: string; // String!
    }
    getAirdropClaimByCode: { // args
      code: string; // String!
    }
    getAirdropClaimById: { // args
      airdropClaimId: string; // ID!
    }
    getAirdropInfo: { // args
      airdropId: string; // ID!
    }
    getCategory: { // args
      slug: string; // String!
    }
    getClaimForAirdrop: { // args
      airdropId: string; // ID!
    }
    getDepositAddress: { // args
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    }
    getDiscoveryResults: { // args
      query: string; // String!
    }
    getEventsForCategory: { // args
      category: NexusGenEnums['CategoryEnum']; // CategoryEnum!
    }
    getEventsForTokens: { // args
      tokenIds: string[]; // [ID!]!
    }
    getFavoriteMemecoinInfo: { // args
      contractAddress: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    }
    getFavoriteMemecoinsForUser: { // args
      userId: string; // ID!
    }
    getFeedPosts: { // args
      tokenId: string; // ID!
    }
    getFollows: { // args
      username: string; // String!
    }
    getFriendsBuyFeed: { // args
      userId: string; // ID!
    }
    getIntercomMobileToken: { // args
      platform?: string | null; // String
    }
    getIsFirstSwapForToken: { // args
      contractAddress: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    }
    getLargestHolders: { // args
      mintAddress: string; // String!
    }
    getMarketCapsAndVolumes: { // args
      tokens: NexusGenInputs['TokenAddressAndProvider'][]; // [TokenAddressAndProvider!]!
    }
    getNewsForTickers: { // args
      tickers: string[]; // [String!]!
    }
    getNumUnreadFriendsTxns: { // args
      userId: string; // ID!
    }
    getOfframpOrderDetails: { // args
      orderId: string; // String!
      provider: string; // String!
    }
    getOfframpUrl: { // args
      address: string; // String!
      amountUsd: number; // Float!
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      isMobileWebview?: boolean | null; // Boolean
      theme?: string | null; // String
    }
    getOnrampUrl: { // args
      address: string; // String!
      amountUsd: number; // Float!
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      overrideProvider?: string | null; // String
      theme?: string | null; // String
    }
    getPortfolio: { // args
      useCache?: boolean | null; // Boolean
    }
    getProfile: { // args
      username: string; // String!
    }
    getQuote: { // args
      amount: number; // Float!
      maxSlippageBps?: number | null; // Int
      receive: NexusGenInputs['QuoteAsset']; // QuoteAsset!
      send: NexusGenInputs['QuoteAsset']; // QuoteAsset!
      side: NexusGenEnums['TradingSideEnum']; // TradingSideEnum!
    }
    getSwap: { // args
      swapId: string; // ID!
    }
    getSwapTransaction: { // args
      quoteId: string; // ID!
      signerWalletAddress: string; // String!
    }
    getToken: { // args
      contractAddress: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    }
    getTokenBySlug: { // args
      slug: string; // String!
    }
    getTokenChart: { // args
      chartType?: NexusGenEnums['ChartTypeEnum'] | null; // ChartTypeEnum
      contractAddress: string; // String!
      granularity: NexusGenEnums['GranularityEnum']; // GranularityEnum!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    }
    getTokenHolding: { // args
      contractAddress: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    }
    getTokenInfo: { // args
      contractAddress: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    }
    getTokenPermissions: { // args
      tokenId: string; // ID!
    }
    getTokenPrice: { // args
      contractAddress: string; // String!
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
    }
    getTransactionStatus: { // args
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      hash: string; // String!
    }
    getTransactions: { // args
      limit?: number | null; // Int
      page?: number | null; // Int
      provider?: NexusGenEnums['AccountProviderEnum'] | null; // AccountProviderEnum
      tokenContractAddress?: string | null; // String
    }
    getUserBuyFeed: { // args
      userId: string; // ID!
    }
    getWithdrawal: { // args
      withdrawalId: string; // ID!
    }
    getWithdrawalTransaction: { // args
      amount: number; // Float!
      chain: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      contractAddress: string; // String!
      fromWalletAddress: string; // String!
      toWalletAddress: string; // String!
    }
    searchTokens: { // args
      provider: NexusGenEnums['AccountProviderEnum']; // AccountProviderEnum!
      search?: string | null; // String
      side?: NexusGenEnums['TradingSideEnum'] | null; // TradingSideEnum
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}