### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum ActivityFilter {
  new
  unread
}

type Category {
  emoji: String!
  name: String!
  subcategories: [String!]!
}

enum CategoryEnum {
  ARTS___CULTURE
  BUSINESS_MODELS
  CORPORATE_TECHNOLOGY
  ENTREPRENEURSHIP
  FINANCE___LEGAL
  HEALTH___WELLNESS
  INTERNATIONAL_BUSINESS
  MANAGEMENT
  SOFTWARE_ENGINEERING
  STARTUPS
  TECHNOLOGY___SOCIETY
  VENTURE_CAPITAL___INVESTMENT
}

type CategorySection {
  categories: [Category!]!
  name: String!
}

type Content {
  audioUrl: String!
  authorImageUrl: String
  authorName: String!
  categories: [String!]!
  contentSession: ContentSession
  context: String!
  createdAt: Date!
  followUpQuestions: [FollowUpQuestion!]!
  id: String!
  lengthMs: Int!
  lengthSeconds: Int!
  sourceImageUrl: String
  summary: String
  thumbnailImageUrl: String
  title: String!
  updatedAt: Date!
  websiteUrl: String!
}

enum ContentFeedFilter {
  for_you
  new
  popular
  queue
  unread
}

type ContentRespondResponse {
  responseAudioUrl: String!
  transcription: String!
}

type ContentSession {
  bookmarkedAt: Date
  content: Content
  contentId: String!
  createdAt: Date!
  currentMs: Float
  durationMs: Float
  id: String!
  isBookmarked: Boolean
  percentFinished: Float
  timestampCursor: Float
  updatedAt: Date!
  userId: String!
}

type CreateUserResponse {
  token: String!
  user: User!
}

"""Date custom scalar type"""
scalar Date

type FollowUpQuestion {
  answer: String!
  id: String!
  question: String!
}

type GetMobileUpdateResponse {
  latestVersion: String
  shouldUpdate: Boolean!
  userVersion: String
}

type Interaction {
  contentId: ID!
  createdAt: Date!
  id: ID!
  type: InteractionTypeEnum!
  updatedAt: Date!
}

enum InteractionTypeEnum {
  Bookmarked
  Finished
  LeftInProgress
  Likes
  ListenedToBeginning
  ScrolledPast
  Skipped
}

type Metadata {
  author: String
  byline: String
  dir: String
  excerpt: String
  full_text: String
  lang: String
  length: Int
  page_type: String
  publishedTime: String
  siteName: String
}

type Mutation {
  bookmarkContent(contentId: ID!): ContentSession!
  createUser(email: String!, name: String, password: String, referralCode: String, username: String): CreateUserResponse!
  deleteMe: String!
  getAuthToken: String!
  recordInteraction(contentId: ID!, eventType: InteractionTypeEnum!): Interaction!
  respondToContent(audioFileUrl: String!, contentId: ID!): ContentRespondResponse!
  sendVerification(phoneNumber: String!): String!
  setCommuteTime(commuteTime: String, timezone: String): User!
  setInterests(interestCategories: [String!]!, interestDescription: String): User!
  showMore: String!
  startContent(contentId: ID!): ContentSession!
  startListening: ContentSession!
  updateContentSession(contentSessionId: ID!, currentMs: Int, isBookmarked: Boolean, isLiked: Boolean): ContentSession!
  updateUser(avatarImageUrl: String, biometricPublicKey: String, hasMobile: Boolean, hasPushNotifications: Boolean, hasTwoFactorAuth: Boolean, name: String, unreadCount: Int): User!
  verifyPhoneNumber(otpCode: String!, phoneNumber: String!): User!
}

type PaymentMethod {
  last4: String!
  paymentMethodId: String!
  source: String!
}

type Profile {
  avatarImageUrl: String
  description: String!
  id: ID!
  isFollowing: Boolean!
  name: String!
  numFollowers: Int!
  numFollowing: Int!
  username: String!
}

type Query {
  checkCode(referralCode: String!): Boolean!
  getActivity(filter: ActivityFilter): [Content!]!
  getBookmarks(limit: Int, page: Int): [Content!]!
  getCategories: [CategorySection!]!
  getContent(contentId: ID!): Content!
  getContentFeed(filter: ContentFeedFilter, limit: Int): [Content!]!
  getContentSession(contentId: ID!): ContentSession!
  getCurrentContentSession: ContentSession
  getIntercomMobileToken(platform: String): String!
  getLikes(limit: Int, page: Int): [ContentSession!]!
  getMobileUpdate: GetMobileUpdateResponse!
  getNextContent(afterContentId: ID!, currentMs: Int): Queue
  getPaymentMethods: [PaymentMethod!]!
  getPrevContent(beforeContentId: ID!, currentMs: Int): Queue
  getProfile(userId: ID): Profile!
  getQueue: [Queue!]!
  me: User
  searchSimilarLinks(limit: Int = 8, query: String!): [SearchResult!]!
}

type Queue {
  content: Content
  contentId: ID!
  contentSession: ContentSession
  createdAt: Date!
  id: ID!
  position: Float!
  updatedAt: Date!
  userId: ID!
}

type SearchResult {
  averageDistance: Float!
  createdDate: Date!
  fullText: String
  id: Int!
  lastCrawled: Date
  link: String!
  metadata: Metadata
  minDistance: Float!
  modifiedDate: Date!
  readCount: Int!
  snippet: String
  title: String!
  userIds: [Int!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  authProvider: UserAuthProviderEnum!
  authProviderId: String!
  avatarImageUrl: String
  biometricPublicKey: String
  createdAt: Date!
  description: String!
  email: String!
  hasMobile: Boolean
  hasPushNotificationsEnabled: Boolean
  hasTwoFactorAuth: Boolean!
  hasVerifiedPhoneNumber: Boolean!
  id: String!
  intercomMobileUserHash: String
  intercomUserHash: String
  isSuperuser: Boolean!
  name: String
  number: Float
  phoneNumber: String
  referralCode: String
  referredByCode: String
  referredByName: String
  role: String
  updatedAt: Date!
}

enum UserAuthProviderEnum {
  Firebase
}